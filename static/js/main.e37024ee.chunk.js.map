{"version":3,"sources":["pages/resume/content.js","pages/resume/ResumeGraph.js","components/toggle.js","pages/resume/Resume.js","App.js","serviceWorker.js","index.js"],"names":["content","master","branch","commits","info","merge","edu","tag","work","ResumeGraphComponent","withoutAuthor","templateExtend","TemplateName","Metro","commit","message","displayAuthor","displayHash","options","template","gitgraph","name","subject","forEach","data","workData","ToggleSlider","props","state","on","defaultOff","onChange","bind","this","setState","className","off","type","React","Component","Resume","slice","reverse","masterCommits","href","src","alt","style","width","map","i","index","App","developerMode","changeMode","val","float","position","left","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.e37024ee.chunk.js","sourcesContent":["import * as React from \"react\";\nimport {createRef, useLayoutEffect} from \"react\";\n\nexport {\n    GraphContainer,\n    createFixedHashGenerator,\n    createSvg,\n    content\n};\n\nfunction createFixedHashGenerator() {\n    let i = 0, hash = ['198X',\n        'Y2K-02', '2002-04', '3.6GPA:',\n        'Jun2004', '2004', '2005', '2004-05',\n        '2005-07', '2007-08', 'Explore',\n        '2009-10', '2010-12', '2009-12'\n    ]\n    return () => {\n        return hash[i++];\n    };\n}\n\nfunction GraphContainer(props) {\n    const graphContainer = createRef();\n\n    useLayoutEffect(() => {\n        if (graphContainer.current) {\n            props.children(graphContainer.current);\n        }\n    });\n\n    return <div ref={graphContainer} />;\n}\n\nconst SVG_NAMESPACE = \"http://www.w3.org/2000/svg\";\n\n\nfunction createSvg(options) {\n    const svg = document.createElementNS(SVG_NAMESPACE, \"svg\");\n    if (!options) return svg;\n\n    if (options.children) {\n        options.children.forEach((child) => svg.appendChild(child));\n    }\n\n    if (options.viewBox) {\n        svg.setAttribute(\"viewBox\", options.viewBox);\n    }\n\n    if (options.height) {\n        svg.setAttribute(\"height\", options.height.toString());\n    }\n\n    if (options.width) {\n        svg.setAttribute(\"width\", options.width.toString());\n    }\n\n    return svg;\n}\n\nconst content = {\n    master: {\n        branch: \"Srinivas Gannu\",\n        commits: [\n            \"Java trainer, mentor, active learner and social.\",\n            \"Always curious, risk taking & open to sharing (more I share the more I gain), love open-source.\",\n            \"Product/framework oriented design, customer centric and deliver value all the time.\",\n            \"AWS, Azure and IBM cloud expertise with focus on scaling, availability and security.\",\n            \"Pursuing horizon for providing the best solutions with passion for technology & innovation.\"\n        ],\n        info: \"sgannu.e@gmail.com, https://www.linkedin.com/in/srinivasgannu, 989.383.0030, Dallas, TX.\",\n        merge: \"Actively learning ML/AI, python, R and ready for next challenge!!!\"\n    },\n    edu: [\n        {\n            branch: \"Computer Science\",\n            tag: \"2004 - Bachelor Degree\",\n            merge: \"Graduated in distinction\",\n            commits: [\"Mathematics, Algos & DS, DB Systems, Programming, Networking, Automata etc.\",\n                \"Built 'C' Frontend compiler - Lexical analysis, Syntax analysis (lex & yacc).\"\n            ]\n        },\n        {\n            branch: \"System Programming\",\n            tag: \"2010 - UIUC, Champaign, IL\",\n            merge: \"Certification\",\n            commits: [\"Algorithms, data-structures, OS, Security, Android.\",\n                \"Android kernel api & app for monitoring and optimizing resources.\"]\n        }],\n    work: [\n        {\n            branch: \"Alcatel India Ltd\",\n            tag: \"2005 - R&D Associate Developer\",\n            merge: \"Learnt few french words: Bonjour, c'est mon premier boulot.\",\n            commits: [\"Extreme & Dynamic programming in C, C++. Experimental and fun driven development.\",\n                \"Built an application layer for CAMEL protocol for SS7 stack on TCP.\"]\n        },\n        {\n            branch: \"Amdocs Inc.\",\n            tag: \"2009 - Sr. Subject Matter Expert\",\n            merge: \"Experienced Europe & US culture, enjoyed traveling, ping-pong & food.\",\n            commits: [\"Extreme & Dynamic programming, linux kernel, IPC/socket programming, multi threading, shared memory etc.\",\n                \"Invented a custom production data management tool (cascaded relational DB queries).\",\n                \"C, C++, Java & web technologies, Multi threading, web services, PL/SQL etc.\",\n                \"Stressful production rollouts. Debug, fix and hot-patches on the spot.\",\n                \"Custom tools, scripting, large files processing, Reusable modules/libraries, apis.\"\n            ]\n        }, {\n            branch: \"Statefarm.\",\n            tag: \"2012 - Senior Consultant Technical Lead\",\n            merge: \"Had fun taking up challenges and build successful team.\",\n            commits: [\"Technical architecture, fullStack development, experimenting on JS & jQuery, big data, Spring and other java libraries.\",\n                \"Think big - Dynamic Data Driven UI to migrate IBM lotus notes apps. jQuery modules. Vertical DB structure.\",\n                \"CI/CD pipeline on Jenkins, automating version control and releases. Enterprise hard-controls automation.\",\n                \"Extended production data management tool (cascaded relational DB queries).\",\n                \"Encourage reusability, clean code, SOLID and GRASP principles, design patterns.\",\n                \"Leadership qualities, product thinking, Delivery challenges.\"\n            ]\n        }, {\n            branch: \"American Airlines.\",\n            tag: \"Currently - Principal Consultant Technical Lead\",\n            merge: \"Work life balance/integration.\",\n            commits: [\"Technical architecture on and off cloud, fullStack + devops, cloud technologies, Kubernetes, Docker, Angular vs react.\",\n                \"Think big - reusability across enterprise through inner-source.\",\n                \"Automation every where. Saved several hours for QA and developers through simple solutions.\",\n                \"Built customized chrome extensions for forms data, A11Y validation framework, nodejs lib for IBM & Azure cloud deployment scripts.\",\n                \"Design thinking, Agile principles, From complex design patterns to simple, SOLID and GRASP code.\",\n                \"Focus on team success than personal. Ownership, mentoring, training and technical/behavioral screening.\"\n            ]\n        }]\n};","import React from 'react';\nimport {Gitgraph, templateExtend, TemplateName} from '@gitgraph/react';\nimport {content} from './content';\n\nexport function ResumeGraphComponent() {\n    const withoutAuthor = templateExtend(TemplateName.Metro, {\n        commit: {\n            message: {\n                displayAuthor: false,\n                displayHash: false\n            },\n        },\n    });\n\n    const renderContact = () => {\n        return (\n            <text>\n                <span className=\"selected\">{content.master.branch}</span>\n                <a className=\"gray\" href=\"mailto:sgannu.e@gmail.com\">\n                    <img src=\"email.png\" alt=\"icon\" style={{width: '15px'}} />\n                    <span>sgannu.e@gmail.com</span>\n                </a>\n                <a className=\"gray\" href=\"tel:989-383-0030\">\n                    <img src=\"phone.png\" alt=\"icon\" style={{width: '15px'}} />\n                    <span>989.383.0030</span>\n                </a>\n            </text>\n        );\n    };\n\n    return (\n        <Gitgraph options={{\n            template: withoutAuthor\n            // generateCommitHash: createFixedHashGenerator()\n        }}>\n            {(gitgraph) => {\n                // Simulate git commands with Gitgraph API.\n                const master = gitgraph.branch({name: content.master.branch});\n                master.commit({subject: \"Initial commit in Millennials era\"});\n                const edu = gitgraph.branch(\"Education\");\n                edu.commit(\"Personal finance, desktop with 128MB RAM and 1GB HD\")\n\n                content.edu.forEach(data => {\n                    edu.merge(branch(gitgraph, data), data.merge).tag(data.tag);\n                });\n                master.merge(edu, \"Most eligible graduate for programming job!\");\n\n                const work = gitgraph.branch(\"Professional experience\");\n                work.commit(\"Got drivers license, Bought some business casuals and upgraded to laptop.\");\n                content.work.forEach(workData => {\n                    work.merge(branch(gitgraph, workData), workData.merge).tag(workData.tag);\n                });\n                master.merge(work, content.master.merge);\n                content.master.commits.forEach(commit => master.commit(commit));\n                master.commit(content.master.info)\n            }}\n        </Gitgraph>\n    );\n}\n\nfunction branch(gitgraph, data) {\n    const branch = gitgraph.branch(data.branch);\n    data.commits.forEach(commit => branch.commit(commit));\n    return branch;\n}","import React from 'react';\n\nexport default class ToggleSlider extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {on: props.defaultOff ? false : true};\n        this.onChange = this.onChange.bind(this);\n    }\n\n    onChange() {\n        this.setState({on: !this.state.on})\n        this.props.onChange(!this.state.on);\n    }\n\n    render() {\n        return (\n            <label className=\"switch round\">\n                <span className={\"switch-text \" + (this.state.on ? 'selected' : '')}>{this.props.on}</span>\n                <span className={\"switch-text right \" + (this.state.on ? '' : 'selected')}>{this.props.off}</span>\n                <input type=\"checkbox\" onChange={this.onChange} />\n                <span className=\"slider round\" />\n            </label>\n        );\n    }\n}","import React, {useRef} from 'react';\nimport {content} from './content';\nimport ReactToPrint from 'react-to-print';\n\nclass Resume extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            work: content.work.slice(0).reverse(),\n            edu: content.edu.slice(0).reverse(),\n            masterCommits: content.master.commits.slice(0).reverse()\n        }\n    }\n\n    render() {\n        return (<div className=\"content\">\n            <div className=\"gray\">\n                <span className=\"selected\">{content.master.branch}</span>&nbsp;&nbsp;\n                <a className=\"gray\" href=\"mailto:sgannu.e@gmail.com\">\n                    <img src=\"email.png\" alt=\"icon\" style={{width: '15px'}} />\n                    <span>sgannu.e@gmail.com</span>\n                </a>&nbsp;&nbsp;\n                <a className=\"gray\" href=\"https://www.linkedin.com/in/srinivasgannu\">\n                    <img src=\"lin.png\" alt=\"icon\" style={{width: '15px'}} />\n                    <span>https://www.linkedin.com/in/srinivasgannu</span>\n                </a>&nbsp;&nbsp;\n                <a className=\"gray\" href=\"tel:989-383-0030\">\n                    <img src=\"phone.png\" alt=\"icon\" style={{width: '15px'}} />\n                    <span>989.383.0030</span>\n                </a>\n                <span>, Dallas, TX.</span>\n                <p className=\"small\">{this.state.master.merge}</p>\n                {this.state.masterCommits.map((commit, i) => {\n                    return <p className=\"small\">{commit}</p>\n                })}<br />\n            </div>\n\n            <div className=\"lists\">\n                {this.state.work.map((edu, index) => {\n                    return <div><span className=\"gray\">{edu.branch} ({edu.tag})</span>\n                        <p className=\"gray small\">{edu.merge}</p>\n                        <ul>\n                            {edu.commits.map((commit, i) => {\n                                return <li>{commit}</li>\n                            })}\n                        </ul>\n                    </div>\n                })}\n\n                {this.state.edu.map((edu, index) => {\n                    return <div>\n                        <span className=\"gray\">{edu.branch} ({edu.tag})</span>\n                        <p className=\"gray small\">{edu.merge}</p>\n                        <ul>\n                            {edu.commits.map((commit, i) => {\n                                return <li>{commit}</li>\n                            })}\n                        </ul>\n                    </div>\n                })}\n            </div>\n        </div>);\n    }\n}\n\n\nconst PrintMode = () => {\n    const componentRef = useRef();\n    return (\n        <div>\n            <ReactToPrint\n                trigger={() =>\n                    <div style={{float: \"left\"}}>\n                        <button class=\"gray\" style={{padding: \"10px\", borderRadius: \"25px\", border: \"3px solid #008fb5\", margin: \"15px\", font: \".8rem Arial\"}}>Print this out!</button>\n                    </div>}\n                content={() => componentRef.current}\n            />\n            <Resume ref={componentRef} />\n        </div>\n    );\n};\n\nexport default Resume;","import React from 'react';\nimport './App.css';\nimport {ResumeGraphComponent} from './pages/resume/ResumeGraph';\nimport ToggleSlider from './components/toggle';\nimport Resume from './pages/resume/Resume';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {developerMode: true};\n    this.changeMode = this.changeMode.bind(this);\n  }\n\n  changeMode(val) {\n    this.setState({developerMode: val});\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"no-print\" style={{float: \"right\", position: \"obsolute\", left: \"50px\"}}>\n          <ToggleSlider on=\"developer mode\" off=\"recruiter mode\" onChange={this.changeMode} />\n        </div>\n        {\n          this.state.developerMode ? (\n            <ResumeGraphComponent />\n          ) : (\n              <Resume />\n            )\n        }\n      </div >\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}