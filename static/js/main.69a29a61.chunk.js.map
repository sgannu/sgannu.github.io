{"version":3,"sources":["pages/helpers.js","pages/ResumeGraph.js","components/toggle.js","pages/Resume.js","App.js","serviceWorker.js","index.js"],"names":["content","master","branch","commit","merge","edu","tag","commits","work","ResumeGraphComponent","withoutAuthor","templateExtend","TemplateName","Metro","message","displayAuthor","displayHash","options","template","gitgraph","name","subject","forEach","data","workData","ToggleSlider","props","state","on","defaultOff","onChange","bind","this","setState","className","off","type","React","Component","Resume","slice","reverse","href","src","alt","style","width","map","index","i","App","developerMode","changeMode","val","float","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.69a29a61.chunk.js","sourcesContent":["import * as React from \"react\";\nimport {createRef, useLayoutEffect} from \"react\";\n\nexport {\n    GraphContainer,\n    createFixedHashGenerator,\n    createSvg,\n    content\n};\n\nfunction createFixedHashGenerator() {\n    let i = 0, hash = ['198X',\n        'Y2K-02', '2002-04', '3.6GPA:',\n        'Jun2004', '2004', '2005', '2004-05',\n        '2005-07', '2007-08', 'Explore',\n        '2009-10', '2010-12', '2009-12'\n    ]\n    return () => {\n        return hash[i++];\n    };\n}\n\nfunction GraphContainer(props) {\n    const graphContainer = createRef();\n\n    useLayoutEffect(() => {\n        if (graphContainer.current) {\n            props.children(graphContainer.current);\n        }\n    });\n\n    return <div ref={graphContainer} />;\n}\n\nconst SVG_NAMESPACE = \"http://www.w3.org/2000/svg\";\n\n\nfunction createSvg(options) {\n    const svg = document.createElementNS(SVG_NAMESPACE, \"svg\");\n    if (!options) return svg;\n\n    if (options.children) {\n        options.children.forEach((child) => svg.appendChild(child));\n    }\n\n    if (options.viewBox) {\n        svg.setAttribute(\"viewBox\", options.viewBox);\n    }\n\n    if (options.height) {\n        svg.setAttribute(\"height\", options.height.toString());\n    }\n\n    if (options.width) {\n        svg.setAttribute(\"width\", options.width.toString());\n    }\n\n    return svg;\n}\n\nconst content = {\n    master: {\n        branch: \"Srinivas Gannu\",\n        commit: \"Pursuing horizon for providing the best solutions with passion for technology & innovation.\",\n        merge: \"sgannu.e@gmail.com, 989.383.0030, Dallas, TX.\"\n    },\n    edu: [\n        {\n            branch: \"Computer Science\",\n            tag: \"2004 - Bachelor Degree\",\n            merge: \"Graduated in distinction\",\n            commits: [\"Mathematics, Algos & DS, DB Systems, Programming, Networking, Automata etc.\",\n                \"Built 'C' Frontend compiler - Lexical analysis, Syntax analysis (lex & yacc).\"\n            ]\n        },\n        {\n            branch: \"System Programming\",\n            tag: \"2010 - UIUC, Champaign, IL\",\n            merge: \"Certification\",\n            commits: [\"Algorithms, datastructures, OS, Security, Andrioid.\",\n                \"Andriod kernel api & app for monitoring and optimizing resources.\"]\n        }],\n    work: [\n        {\n            branch: \"Alcatel India Ltd\",\n            tag: \"2005 - R&D Associate Developer\",\n            merge: \"Learnt few french words: Bonjour, c'est mon premier boulot.\",\n            commits: [\"Extreme programming in C, C++. Experimental and fun driven development.\",\n                \"Built an application layer for CAMEL protocol for SS7 stack on TCP.\"]\n        },\n        {\n            branch: \"Amdocs Inc.\",\n            tag: \"2009 - Sr. Subject Matter Expert\",\n            merge: \"Experienced Europe & US culture, enjoyed traveling, ping-pong & food.\",\n            commits: [\"Extreme programming, linux kernel, IPC/socket programming, multi threading, shared memory etc.\",\n                \"From C, C++ to Java & web technologies, Multi threading, web services, unit testing etc.\",\n                \"Front end applications, desktop tools, automate tedious tasks, pl/sql.\",\n                \"Shortcuts, custom tools, scripting, Reusable modules/libraries, apis.\"\n            ]\n        }, {\n            branch: \"Statefarm.\",\n            tag: \"2012 - Senior Consultant Technical Lead\",\n            merge: \"Had fun taking up challenges and build successful team.\",\n            commits: [\"FullStack development, experimenting on JS & JQuery, big data, Spring and other java libraries.\",\n                \"CI/CD pipeline on jenkins, automating version control and releases.\",\n                \"Encourage reusability, clean code, solid principles, design patterns.\",\n                \"Leadership qualities, product thinking, Delivery challenges.\"\n            ]\n        }, {\n            branch: \"American Airlines.\",\n            tag: \"Currently - Principal Consultant Technical Lead\",\n            merge: \"Work life balance/integration. Volleyball & still love ping-pong.\",\n            commits: [\"FullStack + devops, cloud technologies, Kubernetes, Docker, Angular vs react.\",\n                \"Design thinking, Agile principles, From complex design patterns to simple and SOLID code.\",\n                \"Focus on team success than personal. Ownership, mentoring, traning.\"\n            ]\n        }]\n};","import React from 'react';\nimport {Gitgraph, templateExtend, TemplateName} from '@gitgraph/react';\nimport {content} from './helpers';\n\nexport function ResumeGraphComponent() {\n    const withoutAuthor = templateExtend(TemplateName.Metro, {\n        commit: {\n            message: {\n                displayAuthor: false,\n                displayHash: false\n            },\n        },\n    });\n\n    const renderContact = () => {\n        return (\n            <text>\n                <span className=\"selected\">{content.master.branch}</span>\n                <a className=\"gray\" href=\"mailto:sgannu.e@gmail.com\">\n                    <img src=\"email.png\" alt=\"icon\" style={{width: '15px'}} />\n                    <span>sgannu.e@gmail.com</span>\n                </a>\n                <a className=\"gray\" href=\"tel:989-383-0030\">\n                    <img src=\"phone.png\" alt=\"icon\" style={{width: '15px'}} />\n                    <span>989.383.0030</span>\n                </a>\n            </text>\n        );\n    };\n\n    return (\n        <Gitgraph options={{\n            template: withoutAuthor\n            // generateCommitHash: createFixedHashGenerator()\n        }}>\n            {(gitgraph) => {\n                // Simulate git commands with Gitgraph API.\n                const master = gitgraph.branch({name: content.master.branch});\n                master.commit({subject: \"Initial commit in Millennials era\"});\n                const edu = gitgraph.branch(\"Education\");\n                edu.commit(\"Personal finance, desktop with 128MB RAM and 1GB HD\")\n\n                content.edu.forEach(data => {\n                    edu.merge(branch(gitgraph, data), data.merge).tag(data.tag);\n                });\n                master.merge(edu, \"Most eligible graduate for programming job!\");\n\n                const work = gitgraph.branch(\"Professional experience\");\n                work.commit(\"Got drivers license, Bought some business casuals and upgraded to laptop.\");\n                content.work.forEach(workData => {\n                    work.merge(branch(gitgraph, workData), workData.merge).tag(workData.tag);\n                });\n                master.merge(work, content.master.commit + \"Father, runner, love recreational sports (biking, volleyball, ping-pong, tennis, foosball)\");\n                master.commit(content.master.merge)\n            }}\n        </Gitgraph>\n    );\n}\n\nfunction branch(gitgraph, data) {\n    const branch = gitgraph.branch(data.branch);\n    data.commits.forEach(commit => branch.commit(commit));\n    return branch;\n}","import React from 'react';\n\nexport default class ToggleSlider extends React.Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {on: props.defaultOff ? false : true};\n        this.onChange = this.onChange.bind(this);\n    }\n\n    onChange() {\n        this.setState({on: !this.state.on})\n        this.props.onChange(!this.state.on);\n    }\n\n    render() {\n        return (\n            <label className=\"switch round\">\n                <span className={\"switch-text \" + (this.state.on ? 'selected' : '')}>{this.props.on}</span>\n                <span className={\"switch-text right \" + (this.state.on ? '' : 'selected')}>{this.props.off}</span>\n                <input type=\"checkbox\" onChange={this.onChange} />\n                <span className=\"slider round\" />\n            </label>\n        );\n    }\n}","import React from 'react';\nimport {content} from './helpers';\n\nexport default class Resume extends React.Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n            work: content.work.slice(0).reverse(),\n            edu: content.edu.slice(0).reverse()\n        }\n    }\n\n    render() {\n        return (<div className=\"content\">\n            <div className=\"gray\">\n                <span className=\"selected\">{content.master.branch}</span>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;\n                <a className=\"gray\" href=\"mailto:sgannu.e@gmail.com\">\n                    <img src=\"email.png\" alt=\"icon\" style={{width: '15px'}} />\n                    <span>sgannu.e@gmail.com</span>\n                </a>&nbsp;&nbsp;&nbsp;&nbsp;\n                <a className=\"gray\" href=\"tel:989-383-0030\">\n                    <img src=\"phone.png\" alt=\"icon\" style={{width: '15px'}} />\n                    <span>989.383.0030</span>\n                </a>\n                <span>, Dallas, TX.</span>\n                <p className=\"small\">{content.master.commit}</p>\n                <p className=\"small\">Father, runner, love recreational sports (biking, volleyball, ping-pong, tennis, foosball).</p>\n                <br />\n            </div>\n\n            <div className=\"lists\">\n                {this.state.work.map((edu, index) => {\n                    return <div><span className=\"gray\">{edu.branch} ({edu.tag})</span>\n                        <p className=\"gray small\">{edu.merge}</p>\n                        <ul>\n                            {edu.commits.map((commit, i) => {\n                                return <li>{commit}</li>\n                            })}\n                        </ul>\n                    </div>\n                })}\n\n                {this.state.edu.map((edu, index) => {\n                    return <div>\n                        <span className=\"gray\">{edu.branch} ({edu.tag})</span>\n                        <p className=\"gray small\">{edu.merge}</p>\n                        <ul>\n                            {edu.commits.map((commit, i) => {\n                                return <li>{commit}</li>\n                            })}\n                        </ul>\n                    </div>\n                })}\n            </div>\n        </div >);\n    }\n}\n","import React from 'react';\nimport './App.css';\nimport {ResumeGraphComponent} from './pages/ResumeGraph';\nimport ToggleSlider from './components/toggle';\nimport Resume from './pages/Resume';\n\nclass App extends React.Component {\n\n  constructor(props) {\n    super(props);\n    this.state = {developerMode: true};\n    this.changeMode = this.changeMode.bind(this);\n  }\n\n  changeMode(val) {\n    this.setState({developerMode: val});\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <div style={{float: \"right\"}}>\n          <ToggleSlider on=\"developer mode\" off=\"recruiter mode\" onChange={this.changeMode} />\n        </div>\n        {this.state.developerMode ? (\n          <ResumeGraphComponent />\n        ) : (\n            <Resume />\n          )}\n      </div >\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}