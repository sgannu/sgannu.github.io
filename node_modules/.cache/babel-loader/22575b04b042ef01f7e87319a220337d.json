{"ast":null,"code":"\"use strict\";\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  return t;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst commit_1 = require(\"../commit\");\n\nconst utils_1 = require(\"../utils\");\n\nclass BranchUserApi {\n  // tslint:enable:variable-name\n  constructor(branch, graph, onGraphUpdate) {\n    this._branch = branch;\n    this.name = branch.name;\n    this._graph = graph;\n    this._onGraphUpdate = onGraphUpdate;\n  }\n\n  branch(args) {\n    const options = typeof args === \"string\" ? {\n      name: args\n    } : args;\n    options.from = this;\n    return this._graph.createBranch(options).getUserApi();\n  }\n\n  commit(options) {\n    // Deal with shorter syntax\n    if (typeof options === \"string\") options = {\n      subject: options\n    };\n    if (!options) options = {};\n\n    this._commitWithParents(options, []);\n\n    this._onGraphUpdate();\n\n    return this;\n  }\n\n  merge(...args) {\n    let options = args[0];\n\n    if (!isBranchMergeOptions(options)) {\n      options = {\n        branch: args[0],\n        fastForward: false,\n        commitOptions: {\n          subject: args[1]\n        }\n      };\n    }\n\n    const _options = options,\n          branch = _options.branch,\n          fastForward = _options.fastForward,\n          commitOptions = _options.commitOptions;\n    const branchName = typeof branch === \"string\" ? branch : branch.name;\n\n    const branchLastCommitHash = this._graph.refs.getCommit(branchName);\n\n    if (!branchLastCommitHash) {\n      throw new Error(`The branch called \"${branchName}\" is unknown`);\n    }\n\n    let canFastForward = false;\n\n    if (fastForward) {\n      const lastCommitHash = this._graph.refs.getCommit(this._branch.name);\n\n      if (lastCommitHash) {\n        canFastForward = this._areCommitsConnected(lastCommitHash, branchLastCommitHash);\n      }\n    }\n\n    if (fastForward && canFastForward) {\n      this._fastForwardTo(branchLastCommitHash);\n    } else {\n      this._commitWithParents(Object.assign({}, commitOptions, {\n        subject: commitOptions && commitOptions.subject || `Merge branch ${branchName}`\n      }), [branchLastCommitHash]);\n    }\n\n    this._onGraphUpdate();\n\n    return this;\n  }\n\n  tag(options) {\n    if (typeof options === \"string\") {\n      this._graph.getUserApi().tag({\n        name: options,\n        ref: this._branch.name\n      });\n    } else {\n      this._graph.getUserApi().tag(Object.assign({}, options, {\n        ref: this._branch.name\n      }));\n    }\n\n    return this;\n  }\n  /**\n   * Checkout onto this branch.\n   */\n\n\n  checkout() {\n    this._graph.currentBranch = this._branch;\n    return this;\n  } // tslint:disable:variable-name - Prefix `_` = explicitly private for JS users\n\n\n  _commitWithParents(options, parents) {\n    const parentOnSameBranch = this._graph.refs.getCommit(this._branch.name);\n\n    if (parentOnSameBranch) {\n      parents.unshift(parentOnSameBranch);\n    } else if (this._branch.parentCommitHash) {\n      parents.unshift(this._branch.parentCommitHash);\n    }\n\n    const tag = options.tag,\n          commitOptions = __rest(options, [\"tag\"]);\n\n    const commit = new commit_1.Commit(Object.assign({\n      hash: this._graph.generateCommitHash(),\n      author: this._branch.commitDefaultOptions.author || this._graph.author,\n      subject: this._branch.commitDefaultOptions.subject || this._graph.commitMessage\n    }, commitOptions, {\n      parents,\n      style: this._getCommitStyle(options.style)\n    }));\n\n    if (parentOnSameBranch) {\n      // Take all the refs from the parent\n      const parentRefs = this._graph.refs.getNames(parentOnSameBranch);\n\n      parentRefs.forEach(ref => this._graph.refs.set(ref, commit.hash));\n    } else {\n      // Set the branch ref\n      this._graph.refs.set(this._branch.name, commit.hash);\n    } // Add the new commit\n\n\n    this._graph.commits.push(commit); // Move HEAD on the last commit\n\n\n    this.checkout();\n\n    this._graph.refs.set(\"HEAD\", commit.hash); // Add a tag to the commit if `option.tag` is provide\n\n\n    if (tag) this.tag(tag);\n  }\n\n  _areCommitsConnected(parentCommitHash, childCommitHash) {\n    const childCommit = this._graph.commits.find(({\n      hash\n    }) => childCommitHash === hash);\n\n    if (!childCommit) return false;\n    const isFirstCommitOfGraph = childCommit.parents.length === 0;\n    if (isFirstCommitOfGraph) return false;\n\n    if (childCommit.parents.includes(parentCommitHash)) {\n      return true;\n    } // `childCommitHash` is not a direct child of `parentCommitHash`.\n    // But maybe one of `childCommitHash` parent is.\n\n\n    return childCommit.parents.some(directParentHash => this._areCommitsConnected(parentCommitHash, directParentHash));\n  }\n\n  _fastForwardTo(commitHash) {\n    this._graph.refs.set(this._branch.name, commitHash);\n  }\n\n  _getCommitStyle(style = {}) {\n    return Object.assign({}, utils_1.withoutUndefinedKeys(this._graph.template.commit), utils_1.withoutUndefinedKeys(this._branch.commitDefaultOptions.style), style, {\n      message: Object.assign({}, utils_1.withoutUndefinedKeys(this._graph.template.commit.message), utils_1.withoutUndefinedKeys(this._branch.commitDefaultOptions.style.message), style.message, utils_1.withoutUndefinedKeys({\n        display: this._graph.shouldDisplayCommitMessage && undefined\n      })),\n      dot: Object.assign({}, utils_1.withoutUndefinedKeys(this._graph.template.commit.dot), utils_1.withoutUndefinedKeys(this._branch.commitDefaultOptions.style.dot), style.dot)\n    });\n  }\n\n}\n\nexports.BranchUserApi = BranchUserApi;\n\nfunction isBranchMergeOptions(options) {\n  return typeof options === \"object\" && !(options instanceof BranchUserApi);\n}","map":{"version":3,"sources":["../../src/user-api/branch-user-api.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;AAOA,MAAA,QAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;AAEA,MAAA,OAAA,GAAA,OAAA,CAAA,UAAA,CAAA;;AAqBA,MAAM,aAAN,CAAmB;AAWjB;AAEA,EAAA,WAAA,CACE,MADF,EAEE,KAFF,EAGE,aAHF,EAG2B;AAEzB,SAAK,OAAL,GAAe,MAAf;AACA,SAAK,IAAL,GAAY,MAAM,CAAC,IAAnB;AACA,SAAK,MAAL,GAAc,KAAd;AACA,SAAK,cAAL,GAAsB,aAAtB;AACD;;AAgBM,EAAA,MAAM,CAAC,IAAD,EAAU;AACrB,UAAM,OAAO,GACX,OAAO,IAAP,KAAgB,QAAhB,GAA2B;AAAE,MAAA,IAAI,EAAE;AAAR,KAA3B,GAA4C,IAD9C;AAGA,IAAA,OAAO,CAAC,IAAR,GAAe,IAAf;AAEA,WAAO,KAAK,MAAL,CAAY,YAAZ,CAAyB,OAAzB,EAAkC,UAAlC,EAAP;AACD;;AAcM,EAAA,MAAM,CAAC,OAAD,EAAgD;AAC3D;AACA,QAAI,OAAO,OAAP,KAAmB,QAAvB,EAAiC,OAAO,GAAG;AAAE,MAAA,OAAO,EAAE;AAAX,KAAV;AACjC,QAAI,CAAC,OAAL,EAAc,OAAO,GAAG,EAAV;;AAEd,SAAK,kBAAL,CAAwB,OAAxB,EAAiC,EAAjC;;AACA,SAAK,cAAL;;AAEA,WAAO,IAAP;AACD;;AAsBM,EAAA,KAAK,CAAC,GAAG,IAAJ,EAAe;AACzB,QAAI,OAAO,GAAG,IAAI,CAAC,CAAD,CAAlB;;AACA,QAAI,CAAC,oBAAoB,CAAQ,OAAR,CAAzB,EAA2C;AACzC,MAAA,OAAO,GAAG;AACR,QAAA,MAAM,EAAE,IAAI,CAAC,CAAD,CADJ;AAER,QAAA,WAAW,EAAE,KAFL;AAGR,QAAA,aAAa,EAAE;AAAE,UAAA,OAAO,EAAE,IAAI,CAAC,CAAD;AAAf;AAHP,OAAV;AAKD;;AARwB,qBAarB,OAbqB;AAAA,UAUvB,MAVuB,YAUvB,MAVuB;AAAA,UAWvB,WAXuB,YAWvB,WAXuB;AAAA,UAYvB,aAZuB,YAYvB,aAZuB;AAezB,UAAM,UAAU,GAAG,OAAO,MAAP,KAAkB,QAAlB,GAA6B,MAA7B,GAAsC,MAAM,CAAC,IAAhE;;AACA,UAAM,oBAAoB,GAAG,KAAK,MAAL,CAAY,IAAZ,CAAiB,SAAjB,CAA2B,UAA3B,CAA7B;;AACA,QAAI,CAAC,oBAAL,EAA2B;AACzB,YAAM,IAAI,KAAJ,CAAU,sBAAsB,UAAU,cAA1C,CAAN;AACD;;AAED,QAAI,cAAc,GAAG,KAArB;;AACA,QAAI,WAAJ,EAAiB;AACf,YAAM,cAAc,GAAG,KAAK,MAAL,CAAY,IAAZ,CAAiB,SAAjB,CAA2B,KAAK,OAAL,CAAa,IAAxC,CAAvB;;AACA,UAAI,cAAJ,EAAoB;AAClB,QAAA,cAAc,GAAG,KAAK,oBAAL,CACf,cADe,EAEf,oBAFe,CAAjB;AAID;AACF;;AAED,QAAI,WAAW,IAAI,cAAnB,EAAmC;AACjC,WAAK,cAAL,CAAoB,oBAApB;AACD,KAFD,MAEO;AACL,WAAK,kBAAL,CAAuB,MAAA,CAAA,MAAA,CAAA,EAAA,EAEhB,aAFgB,EAEH;AAChB,QAAA,OAAO,EACJ,aAAa,IAAI,aAAa,CAAC,OAAhC,IACA,gBAAgB,UAAU;AAHZ,OAFG,CAAvB,EAOE,CAAC,oBAAD,CAPF;AASD;;AAED,SAAK,cAAL;;AACA,WAAO,IAAP;AACD;;AAcM,EAAA,GAAG,CAAC,OAAD,EAAc;AACtB,QAAI,OAAO,OAAP,KAAmB,QAAvB,EAAiC;AAC/B,WAAK,MAAL,CAAY,UAAZ,GAAyB,GAAzB,CAA6B;AAAE,QAAA,IAAI,EAAE,OAAR;AAAiB,QAAA,GAAG,EAAE,KAAK,OAAL,CAAa;AAAnC,OAA7B;AACD,KAFD,MAEO;AACL,WAAK,MAAL,CAAY,UAAZ,GAAyB,GAAzB,CAA4B,MAAA,CAAA,MAAA,CAAA,EAAA,EAAM,OAAN,EAAa;AAAE,QAAA,GAAG,EAAE,KAAK,OAAL,CAAa;AAApB,OAAb,CAA5B;AACD;;AAED,WAAO,IAAP;AACD;AAED;;;;;AAGO,EAAA,QAAQ,GAAA;AACb,SAAK,MAAL,CAAY,aAAZ,GAA4B,KAAK,OAAjC;AACA,WAAO,IAAP;AACD,GAxKgB,CA0KjB;;;AAEQ,EAAA,kBAAkB,CACxB,OADwB,EAExB,OAFwB,EAEP;AAEjB,UAAM,kBAAkB,GAAG,KAAK,MAAL,CAAY,IAAZ,CAAiB,SAAjB,CAA2B,KAAK,OAAL,CAAa,IAAxC,CAA3B;;AACA,QAAI,kBAAJ,EAAwB;AACtB,MAAA,OAAO,CAAC,OAAR,CAAgB,kBAAhB;AACD,KAFD,MAEO,IAAI,KAAK,OAAL,CAAa,gBAAjB,EAAmC;AACxC,MAAA,OAAO,CAAC,OAAR,CAAgB,KAAK,OAAL,CAAa,gBAA7B;AACD;;AAEK,UAAE,GAAF,GAA4B,OAA5B,CAAE,GAAF;AAAA,UAAO,aAAP,GAAO,MAAA,CAAA,OAAA,EAAA,CAAA,KAAA,CAAA,CAAP;;AACN,UAAM,MAAM,GAAG,IAAI,QAAA,CAAA,MAAJ,CAAU,MAAA,CAAA,MAAA,CAAA;AACvB,MAAA,IAAI,EAAE,KAAK,MAAL,CAAY,kBAAZ,EADiB;AAEvB,MAAA,MAAM,EAAE,KAAK,OAAL,CAAa,oBAAb,CAAkC,MAAlC,IAA4C,KAAK,MAAL,CAAY,MAFzC;AAGvB,MAAA,OAAO,EACL,KAAK,OAAL,CAAa,oBAAb,CAAkC,OAAlC,IACC,KAAK,MAAL,CAAY;AALQ,KAAA,EAMpB,aANoB,EAMP;AAChB,MAAA,OADgB;AAEhB,MAAA,KAAK,EAAE,KAAK,eAAL,CAAqB,OAAO,CAAC,KAA7B;AAFS,KANO,CAAV,CAAf;;AAWA,QAAI,kBAAJ,EAAwB;AACtB;AACA,YAAM,UAAU,GAAG,KAAK,MAAL,CAAY,IAAZ,CAAiB,QAAjB,CAA0B,kBAA1B,CAAnB;;AACA,MAAA,UAAU,CAAC,OAAX,CAAoB,GAAD,IAAS,KAAK,MAAL,CAAY,IAAZ,CAAiB,GAAjB,CAAqB,GAArB,EAA0B,MAAM,CAAC,IAAjC,CAA5B;AACD,KAJD,MAIO;AACL;AACA,WAAK,MAAL,CAAY,IAAZ,CAAiB,GAAjB,CAAqB,KAAK,OAAL,CAAa,IAAlC,EAAwC,MAAM,CAAC,IAA/C;AACD,KA5BgB,CA8BjB;;;AACA,SAAK,MAAL,CAAY,OAAZ,CAAoB,IAApB,CAAyB,MAAzB,EA/BiB,CAiCjB;;;AACA,SAAK,QAAL;;AACA,SAAK,MAAL,CAAY,IAAZ,CAAiB,GAAjB,CAAqB,MAArB,EAA6B,MAAM,CAAC,IAApC,EAnCiB,CAqCjB;;;AACA,QAAI,GAAJ,EAAS,KAAK,GAAL,CAAS,GAAT;AACV;;AAEO,EAAA,oBAAoB,CAC1B,gBAD0B,EAE1B,eAF0B,EAEK;AAE/B,UAAM,WAAW,GAAG,KAAK,MAAL,CAAY,OAAZ,CAAoB,IAApB,CAClB,CAAC;AAAE,MAAA;AAAF,KAAD,KAAc,eAAe,KAAK,IADhB,CAApB;;AAGA,QAAI,CAAC,WAAL,EAAkB,OAAO,KAAP;AAElB,UAAM,oBAAoB,GAAG,WAAW,CAAC,OAAZ,CAAoB,MAApB,KAA+B,CAA5D;AACA,QAAI,oBAAJ,EAA0B,OAAO,KAAP;;AAE1B,QAAI,WAAW,CAAC,OAAZ,CAAoB,QAApB,CAA6B,gBAA7B,CAAJ,EAAoD;AAClD,aAAO,IAAP;AACD,KAZ8B,CAc/B;AACA;;;AACA,WAAO,WAAW,CAAC,OAAZ,CAAoB,IAApB,CAA0B,gBAAD,IAC9B,KAAK,oBAAL,CAA0B,gBAA1B,EAA4C,gBAA5C,CADK,CAAP;AAGD;;AAEO,EAAA,cAAc,CAAC,UAAD,EAA2B;AAC/C,SAAK,MAAL,CAAY,IAAZ,CAAiB,GAAjB,CAAqB,KAAK,OAAL,CAAa,IAAlC,EAAwC,UAAxC;AACD;;AAEO,EAAA,eAAe,CAAC,KAAA,GAAmC,EAApC,EAAsC;AAC3D,WAAO,MAAA,CAAA,MAAA,CAAA,EAAA,EACF,OAAA,CAAA,oBAAA,CAAqB,KAAK,MAAL,CAAY,QAAZ,CAAqB,MAA1C,CADE,EAEF,OAAA,CAAA,oBAAA,CAAqB,KAAK,OAAL,CAAa,oBAAb,CAAkC,KAAvD,CAFE,EAGF,KAHE,EAGG;AACR,MAAA,OAAO,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACF,OAAA,CAAA,oBAAA,CAAqB,KAAK,MAAL,CAAY,QAAZ,CAAqB,MAArB,CAA4B,OAAjD,CADE,EAEF,OAAA,CAAA,oBAAA,CACD,KAAK,OAAL,CAAa,oBAAb,CAAkC,KAAlC,CAAyC,OADxC,CAFE,EAKF,KAAK,CAAC,OALJ,EAMF,OAAA,CAAA,oBAAA,CAAqB;AACtB,QAAA,OAAO,EAAE,KAAK,MAAL,CAAY,0BAAZ,IAA0C;AAD7B,OAArB,CANE,CADC;AAWR,MAAA,GAAG,EAAA,MAAA,CAAA,MAAA,CAAA,EAAA,EACE,OAAA,CAAA,oBAAA,CAAqB,KAAK,MAAL,CAAY,QAAZ,CAAqB,MAArB,CAA4B,GAAjD,CADF,EAEE,OAAA,CAAA,oBAAA,CAAqB,KAAK,OAAL,CAAa,oBAAb,CAAkC,KAAlC,CAAyC,GAA9D,CAFF,EAGE,KAAK,CAAC,GAHR;AAXK,KAHH,CAAP;AAoBD;;AAvQgB;;AAnBV,OAAA,CAAA,aAAA,GAAA,aAAA;;AA+RT,SAAS,oBAAT,CACE,OADF,EAC4C;AAE1C,SAAO,OAAO,OAAP,KAAmB,QAAnB,IAA+B,EAAE,OAAO,YAAY,aAArB,CAAtC;AACD","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\n            t[p[i]] = s[p[i]];\n    return t;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst commit_1 = require(\"../commit\");\nconst utils_1 = require(\"../utils\");\nclass BranchUserApi {\n    // tslint:enable:variable-name\n    constructor(branch, graph, onGraphUpdate) {\n        this._branch = branch;\n        this.name = branch.name;\n        this._graph = graph;\n        this._onGraphUpdate = onGraphUpdate;\n    }\n    branch(args) {\n        const options = typeof args === \"string\" ? { name: args } : args;\n        options.from = this;\n        return this._graph.createBranch(options).getUserApi();\n    }\n    commit(options) {\n        // Deal with shorter syntax\n        if (typeof options === \"string\")\n            options = { subject: options };\n        if (!options)\n            options = {};\n        this._commitWithParents(options, []);\n        this._onGraphUpdate();\n        return this;\n    }\n    merge(...args) {\n        let options = args[0];\n        if (!isBranchMergeOptions(options)) {\n            options = {\n                branch: args[0],\n                fastForward: false,\n                commitOptions: { subject: args[1] },\n            };\n        }\n        const { branch, fastForward, commitOptions, } = options;\n        const branchName = typeof branch === \"string\" ? branch : branch.name;\n        const branchLastCommitHash = this._graph.refs.getCommit(branchName);\n        if (!branchLastCommitHash) {\n            throw new Error(`The branch called \"${branchName}\" is unknown`);\n        }\n        let canFastForward = false;\n        if (fastForward) {\n            const lastCommitHash = this._graph.refs.getCommit(this._branch.name);\n            if (lastCommitHash) {\n                canFastForward = this._areCommitsConnected(lastCommitHash, branchLastCommitHash);\n            }\n        }\n        if (fastForward && canFastForward) {\n            this._fastForwardTo(branchLastCommitHash);\n        }\n        else {\n            this._commitWithParents(Object.assign({}, commitOptions, { subject: (commitOptions && commitOptions.subject) ||\n                    `Merge branch ${branchName}` }), [branchLastCommitHash]);\n        }\n        this._onGraphUpdate();\n        return this;\n    }\n    tag(options) {\n        if (typeof options === \"string\") {\n            this._graph.getUserApi().tag({ name: options, ref: this._branch.name });\n        }\n        else {\n            this._graph.getUserApi().tag(Object.assign({}, options, { ref: this._branch.name }));\n        }\n        return this;\n    }\n    /**\n     * Checkout onto this branch.\n     */\n    checkout() {\n        this._graph.currentBranch = this._branch;\n        return this;\n    }\n    // tslint:disable:variable-name - Prefix `_` = explicitly private for JS users\n    _commitWithParents(options, parents) {\n        const parentOnSameBranch = this._graph.refs.getCommit(this._branch.name);\n        if (parentOnSameBranch) {\n            parents.unshift(parentOnSameBranch);\n        }\n        else if (this._branch.parentCommitHash) {\n            parents.unshift(this._branch.parentCommitHash);\n        }\n        const { tag } = options, commitOptions = __rest(options, [\"tag\"]);\n        const commit = new commit_1.Commit(Object.assign({ hash: this._graph.generateCommitHash(), author: this._branch.commitDefaultOptions.author || this._graph.author, subject: this._branch.commitDefaultOptions.subject ||\n                this._graph.commitMessage }, commitOptions, { parents, style: this._getCommitStyle(options.style) }));\n        if (parentOnSameBranch) {\n            // Take all the refs from the parent\n            const parentRefs = this._graph.refs.getNames(parentOnSameBranch);\n            parentRefs.forEach((ref) => this._graph.refs.set(ref, commit.hash));\n        }\n        else {\n            // Set the branch ref\n            this._graph.refs.set(this._branch.name, commit.hash);\n        }\n        // Add the new commit\n        this._graph.commits.push(commit);\n        // Move HEAD on the last commit\n        this.checkout();\n        this._graph.refs.set(\"HEAD\", commit.hash);\n        // Add a tag to the commit if `option.tag` is provide\n        if (tag)\n            this.tag(tag);\n    }\n    _areCommitsConnected(parentCommitHash, childCommitHash) {\n        const childCommit = this._graph.commits.find(({ hash }) => childCommitHash === hash);\n        if (!childCommit)\n            return false;\n        const isFirstCommitOfGraph = childCommit.parents.length === 0;\n        if (isFirstCommitOfGraph)\n            return false;\n        if (childCommit.parents.includes(parentCommitHash)) {\n            return true;\n        }\n        // `childCommitHash` is not a direct child of `parentCommitHash`.\n        // But maybe one of `childCommitHash` parent is.\n        return childCommit.parents.some((directParentHash) => this._areCommitsConnected(parentCommitHash, directParentHash));\n    }\n    _fastForwardTo(commitHash) {\n        this._graph.refs.set(this._branch.name, commitHash);\n    }\n    _getCommitStyle(style = {}) {\n        return Object.assign({}, utils_1.withoutUndefinedKeys(this._graph.template.commit), utils_1.withoutUndefinedKeys(this._branch.commitDefaultOptions.style), style, { message: Object.assign({}, utils_1.withoutUndefinedKeys(this._graph.template.commit.message), utils_1.withoutUndefinedKeys(this._branch.commitDefaultOptions.style.message), style.message, utils_1.withoutUndefinedKeys({\n                display: this._graph.shouldDisplayCommitMessage && undefined,\n            })), dot: Object.assign({}, utils_1.withoutUndefinedKeys(this._graph.template.commit.dot), utils_1.withoutUndefinedKeys(this._branch.commitDefaultOptions.style.dot), style.dot) });\n    }\n}\nexports.BranchUserApi = BranchUserApi;\nfunction isBranchMergeOptions(options) {\n    return typeof options === \"object\" && !(options instanceof BranchUserApi);\n}\n//# sourceMappingURL=branch-user-api.js.map"]},"metadata":{},"sourceType":"script"}