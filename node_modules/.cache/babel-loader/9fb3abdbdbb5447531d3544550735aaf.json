{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/sgannu/projects/sgannu.github.io/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _classCallCheck = require(\"/Users/sgannu/projects/sgannu.github.io/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/sgannu/projects/sgannu.github.io/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar commit_1 = require(\"../commit\");\n\nvar branch_1 = require(\"../branch\");\n\nvar refs_1 = require(\"../refs\");\n\nvar GitgraphUserApi =\n/*#__PURE__*/\nfunction () {\n  // tslint:enable:variable-name\n  function GitgraphUserApi(graph, onGraphUpdate) {\n    _classCallCheck(this, GitgraphUserApi);\n\n    this._graph = graph;\n    this._onGraphUpdate = onGraphUpdate;\n  }\n  /**\n   * Clear everything (as `rm -rf .git && git init`).\n   */\n\n\n  _createClass(GitgraphUserApi, [{\n    key: \"clear\",\n    value: function clear() {\n      this._graph.refs = new refs_1.Refs();\n      this._graph.tags = new refs_1.Refs();\n      this._graph.commits = [];\n      this._graph.branches = new Map();\n      this._graph.currentBranch = this._graph.createBranch(\"master\");\n\n      this._onGraphUpdate();\n\n      return this;\n    }\n  }, {\n    key: \"commit\",\n    value: function commit(options) {\n      this._graph.currentBranch.getUserApi().commit(options);\n\n      return this;\n    }\n  }, {\n    key: \"branch\",\n    value: function branch(args) {\n      return this._graph.createBranch(args).getUserApi();\n    }\n  }, {\n    key: \"tag\",\n    value: function tag() {\n      // Deal with shorter syntax\n      var name;\n      var ref;\n      var style;\n      var render;\n\n      for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n        args[_key] = arguments[_key];\n      }\n\n      if (typeof args[0] === \"string\") {\n        name = args[0];\n        ref = args[1];\n      } else {\n        name = args[0].name;\n        ref = args[0].ref;\n        style = args[0].style;\n        render = args[0].render;\n      }\n\n      if (!ref) {\n        var head = this._graph.refs.getCommit(\"HEAD\");\n\n        if (!head) return this;\n        ref = head;\n      }\n\n      var commitHash;\n\n      if (this._graph.refs.hasCommit(ref)) {\n        // `ref` is a `Commit[\"hash\"]`\n        commitHash = ref;\n      }\n\n      if (this._graph.refs.hasName(ref)) {\n        // `ref` is a `Branch[\"name\"]`\n        commitHash = this._graph.refs.getCommit(ref);\n      }\n\n      if (!commitHash) {\n        throw new Error(\"The ref \\\"\".concat(ref, \"\\\" does not exist\"));\n      }\n\n      this._graph.tags.set(name, commitHash);\n\n      this._graph.tagStyles[name] = style;\n      this._graph.tagRenders[name] = render;\n\n      this._onGraphUpdate();\n\n      return this;\n    }\n    /**\n     * Import a JSON.\n     *\n     * Data can't be typed since it comes from a JSON.\n     * We validate input format and throw early if something is invalid.\n     *\n     * @experimental\n     * @param data JSON from `git2json` output\n     */\n\n  }, {\n    key: \"import\",\n    value: function _import(data) {\n      var _this = this;\n\n      var invalidData = new Error(\"Only `git2json` format is supported for imported data.\"); // We manually validate input data instead of using a lib like yup.\n      // => this is to keep bundlesize small.\n\n      if (!Array.isArray(data)) {\n        throw invalidData;\n      }\n\n      var areDataValid = data.every(function (options) {\n        return typeof options === \"object\" && typeof options.author === \"object\" && Array.isArray(options.refs);\n      });\n\n      if (!areDataValid) {\n        throw invalidData;\n      }\n\n      var commitOptionsList = data.map(function (options) {\n        return Object.assign({}, options, {\n          style: Object.assign({}, _this._graph.template.commit, {\n            message: Object.assign({}, _this._graph.template.commit.message, {\n              display: _this._graph.shouldDisplayCommitMessage\n            })\n          }),\n          author: \"\".concat(options.author.name, \" <\").concat(options.author.email, \">\")\n        });\n      }) // Git2json outputs is reverse-chronological.\n      // We need to commit it chronological order.\n      .reverse(); // Use validated `value`.\n\n      this.clear();\n      this._graph.commits = commitOptionsList.map(function (options) {\n        return new commit_1.Commit(options);\n      }); // Create tags & refs.\n\n      commitOptionsList.forEach(function (_ref) {\n        var refs = _ref.refs,\n            hash = _ref.hash;\n        if (!refs) return;\n        if (!hash) return;\n        var TAG_PREFIX = \"tag: \";\n        var tags = refs.map(function (ref) {\n          return ref.split(TAG_PREFIX);\n        }).map(function (_ref2) {\n          var _ref3 = _slicedToArray(_ref2, 2),\n              _ = _ref3[0],\n              tag = _ref3[1];\n\n          return tag;\n        }).filter(function (tag) {\n          return typeof tag === \"string\";\n        });\n        tags.forEach(function (tag) {\n          return _this._graph.tags.set(tag, hash);\n        });\n        refs.filter(function (ref) {\n          return !ref.startsWith(TAG_PREFIX);\n        }).forEach(function (ref) {\n          return _this._graph.refs.set(ref, hash);\n        });\n      }); // Create branches.\n\n      var branches = this._getBranches();\n\n      this._graph.commits.map(function (commit) {\n        return _this._withBranches(branches, commit);\n      }).reduce(function (mem, commit) {\n        if (!commit.branches) return mem;\n        commit.branches.forEach(function (branch) {\n          return mem.add(branch);\n        });\n        return mem;\n      }, new Set()).forEach(function (branch) {\n        return _this.branch(branch);\n      });\n\n      this._onGraphUpdate();\n\n      return this;\n    } // tslint:disable:variable-name - Prefix `_` = explicitly private for JS users\n    // TODO: get rid of these duplicated private methods.\n    //\n    // These belong to Gitgraph. It is duplicated because of `import()`.\n    // `import()` should use regular user API instead.\n\n  }, {\n    key: \"_withBranches\",\n    value: function _withBranches(branches, commit) {\n      var commitBranches = Array.from((branches.get(commit.hash) || new Set()).values());\n\n      if (commitBranches.length === 0) {\n        // No branch => branch has been deleted.\n        commitBranches = [branch_1.DELETED_BRANCH_NAME];\n      }\n\n      return commit.setBranches(commitBranches);\n    }\n  }, {\n    key: \"_getBranches\",\n    value: function _getBranches() {\n      var _this2 = this;\n\n      var result = new Map();\n      var queue = [];\n\n      var branches = this._graph.refs.getAllNames().filter(function (name) {\n        return name !== \"HEAD\";\n      });\n\n      branches.forEach(function (branch) {\n        var commitHash = _this2._graph.refs.getCommit(branch);\n\n        if (commitHash) {\n          queue.push(commitHash);\n        }\n\n        var _loop = function _loop() {\n          var currentHash = queue.pop();\n\n          var current = _this2._graph.commits.find(function (_ref4) {\n            var hash = _ref4.hash;\n            return hash === currentHash;\n          });\n\n          var prevBranches = result.get(currentHash) || new Set();\n          prevBranches.add(branch);\n          result.set(currentHash, prevBranches);\n\n          if (current.parents.length > 0) {\n            queue.push(current.parents[0]);\n          }\n        };\n\n        while (queue.length > 0) {\n          _loop();\n        }\n      });\n      return result;\n    }\n  }]);\n\n  return GitgraphUserApi;\n}();\n\nexports.GitgraphUserApi = GitgraphUserApi;","map":{"version":3,"sources":["../../src/user-api/gitgraph-user-api.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst commit_1 = require(\"../commit\");\nconst branch_1 = require(\"../branch\");\nconst refs_1 = require(\"../refs\");\nclass GitgraphUserApi {\n    // tslint:enable:variable-name\n    constructor(graph, onGraphUpdate) {\n        this._graph = graph;\n        this._onGraphUpdate = onGraphUpdate;\n    }\n    /**\n     * Clear everything (as `rm -rf .git && git init`).\n     */\n    clear() {\n        this._graph.refs = new refs_1.Refs();\n        this._graph.tags = new refs_1.Refs();\n        this._graph.commits = [];\n        this._graph.branches = new Map();\n        this._graph.currentBranch = this._graph.createBranch(\"master\");\n        this._onGraphUpdate();\n        return this;\n    }\n    commit(options) {\n        this._graph.currentBranch.getUserApi().commit(options);\n        return this;\n    }\n    branch(args) {\n        return this._graph.createBranch(args).getUserApi();\n    }\n    tag(...args) {\n        // Deal with shorter syntax\n        let name;\n        let ref;\n        let style;\n        let render;\n        if (typeof args[0] === \"string\") {\n            name = args[0];\n            ref = args[1];\n        }\n        else {\n            name = args[0].name;\n            ref = args[0].ref;\n            style = args[0].style;\n            render = args[0].render;\n        }\n        if (!ref) {\n            const head = this._graph.refs.getCommit(\"HEAD\");\n            if (!head)\n                return this;\n            ref = head;\n        }\n        let commitHash;\n        if (this._graph.refs.hasCommit(ref)) {\n            // `ref` is a `Commit[\"hash\"]`\n            commitHash = ref;\n        }\n        if (this._graph.refs.hasName(ref)) {\n            // `ref` is a `Branch[\"name\"]`\n            commitHash = this._graph.refs.getCommit(ref);\n        }\n        if (!commitHash) {\n            throw new Error(`The ref \"${ref}\" does not exist`);\n        }\n        this._graph.tags.set(name, commitHash);\n        this._graph.tagStyles[name] = style;\n        this._graph.tagRenders[name] = render;\n        this._onGraphUpdate();\n        return this;\n    }\n    /**\n     * Import a JSON.\n     *\n     * Data can't be typed since it comes from a JSON.\n     * We validate input format and throw early if something is invalid.\n     *\n     * @experimental\n     * @param data JSON from `git2json` output\n     */\n    import(data) {\n        const invalidData = new Error(\"Only `git2json` format is supported for imported data.\");\n        // We manually validate input data instead of using a lib like yup.\n        // => this is to keep bundlesize small.\n        if (!Array.isArray(data)) {\n            throw invalidData;\n        }\n        const areDataValid = data.every((options) => {\n            return (typeof options === \"object\" &&\n                typeof options.author === \"object\" &&\n                Array.isArray(options.refs));\n        });\n        if (!areDataValid) {\n            throw invalidData;\n        }\n        const commitOptionsList = data\n            .map((options) => (Object.assign({}, options, { style: Object.assign({}, this._graph.template.commit, { message: Object.assign({}, this._graph.template.commit.message, { display: this._graph.shouldDisplayCommitMessage }) }), author: `${options.author.name} <${options.author.email}>` })))\n            // Git2json outputs is reverse-chronological.\n            // We need to commit it chronological order.\n            .reverse();\n        // Use validated `value`.\n        this.clear();\n        this._graph.commits = commitOptionsList.map((options) => new commit_1.Commit(options));\n        // Create tags & refs.\n        commitOptionsList.forEach(({ refs, hash }) => {\n            if (!refs)\n                return;\n            if (!hash)\n                return;\n            const TAG_PREFIX = \"tag: \";\n            const tags = refs\n                .map((ref) => ref.split(TAG_PREFIX))\n                .map(([_, tag]) => tag)\n                .filter((tag) => typeof tag === \"string\");\n            tags.forEach((tag) => this._graph.tags.set(tag, hash));\n            refs\n                .filter((ref) => !ref.startsWith(TAG_PREFIX))\n                .forEach((ref) => this._graph.refs.set(ref, hash));\n        });\n        // Create branches.\n        const branches = this._getBranches();\n        this._graph.commits\n            .map((commit) => this._withBranches(branches, commit))\n            .reduce((mem, commit) => {\n            if (!commit.branches)\n                return mem;\n            commit.branches.forEach((branch) => mem.add(branch));\n            return mem;\n        }, new Set())\n            .forEach((branch) => this.branch(branch));\n        this._onGraphUpdate();\n        return this;\n    }\n    // tslint:disable:variable-name - Prefix `_` = explicitly private for JS users\n    // TODO: get rid of these duplicated private methods.\n    //\n    // These belong to Gitgraph. It is duplicated because of `import()`.\n    // `import()` should use regular user API instead.\n    _withBranches(branches, commit) {\n        let commitBranches = Array.from((branches.get(commit.hash) || new Set()).values());\n        if (commitBranches.length === 0) {\n            // No branch => branch has been deleted.\n            commitBranches = [branch_1.DELETED_BRANCH_NAME];\n        }\n        return commit.setBranches(commitBranches);\n    }\n    _getBranches() {\n        const result = new Map();\n        const queue = [];\n        const branches = this._graph.refs\n            .getAllNames()\n            .filter((name) => name !== \"HEAD\");\n        branches.forEach((branch) => {\n            const commitHash = this._graph.refs.getCommit(branch);\n            if (commitHash) {\n                queue.push(commitHash);\n            }\n            while (queue.length > 0) {\n                const currentHash = queue.pop();\n                const current = this._graph.commits.find(({ hash }) => hash === currentHash);\n                const prevBranches = result.get(currentHash) || new Set();\n                prevBranches.add(branch);\n                result.set(currentHash, prevBranches);\n                if (current.parents.length > 0) {\n                    queue.push(current.parents[0]);\n                }\n            }\n        });\n        return result;\n    }\n}\nexports.GitgraphUserApi = GitgraphUserApi;\n//# sourceMappingURL=gitgraph-user-api.js.map"]},"metadata":{},"sourceType":"script"}