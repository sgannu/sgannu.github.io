{"ast":null,"code":"var __extends = this && this.__extends || function () {\n  var extendStatics = function (d, b) {\n    extendStatics = Object.setPrototypeOf || {\n      __proto__: []\n    } instanceof Array && function (d, b) {\n      d.__proto__ = b;\n    } || function (d, b) {\n      for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];\n    };\n\n    return extendStatics(d, b);\n  };\n\n  return function (d, b) {\n    extendStatics(d, b);\n\n    function __() {\n      this.constructor = d;\n    }\n\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n  };\n}();\n\nimport * as React from \"react\";\nimport { GitgraphCore, MergeStyle, Mode, Orientation, TemplateName, templateExtend, toSvgPath, arrowSvgPath } from \"@gitgraph/core\";\nimport { BranchLabel } from \"./BranchLabel\";\nimport { Tooltip } from \"./Tooltip\";\nimport { Dot } from \"./Dot\";\nimport { Tag, TAG_PADDING_X } from \"./Tag\";\nexport { Gitgraph, TemplateName, templateExtend, MergeStyle, Mode, Orientation };\n\nfunction isPropsWithGraph(props) {\n  return \"graph\" in props;\n}\n\nvar Gitgraph =\n/** @class */\nfunction (_super) {\n  __extends(Gitgraph, _super);\n\n  function Gitgraph(props) {\n    var _this = _super.call(this, props) || this;\n\n    _this.$graph = React.createRef();\n    _this.$commits = React.createRef();\n    _this.$tooltip = null;\n    _this.commitsElements = {};\n    _this.state = {\n      commits: [],\n      branchesPaths: new Map(),\n      commitMessagesX: 0,\n      commitYWithOffsets: {},\n      shouldRecomputeOffsets: true,\n      currentCommitOver: null\n    };\n    _this.gitgraph = isPropsWithGraph(props) ? props.graph : new GitgraphCore(props.options);\n\n    _this.gitgraph.subscribe(function (data) {\n      var commits = data.commits,\n          branchesPaths = data.branchesPaths,\n          commitMessagesX = data.commitMessagesX;\n\n      _this.setState({\n        commits: commits,\n        branchesPaths: branchesPaths,\n        commitMessagesX: commitMessagesX,\n        shouldRecomputeOffsets: true\n      });\n    });\n\n    return _this;\n  }\n\n  Gitgraph.prototype.render = function () {\n    return React.createElement(\"svg\", {\n      ref: this.$graph\n    }, React.createElement(\"g\", {\n      transform: \"translate(\" + BranchLabel.paddingX + \", \" + Tooltip.padding + \")\"\n    }, this.renderBranchesPaths(), this.renderCommits(), this.$tooltip));\n  };\n\n  Gitgraph.prototype.componentDidMount = function () {\n    if (isPropsWithGraph(this.props)) return;\n    this.props.children(this.gitgraph.getUserApi());\n  };\n\n  Gitgraph.prototype.componentDidUpdate = function () {\n    if (this.$graph.current) {\n      var _a = this.$graph.current.getBBox(),\n          height = _a.height,\n          width = _a.width;\n\n      this.$graph.current.setAttribute(\"width\", // Add `Tooltip.padding` so we don't crop the tooltip text.\n      // Add `BranchLabel.paddingX` so we don't cut branch label.\n      (width + Tooltip.padding + BranchLabel.paddingX).toString());\n      this.$graph.current.setAttribute(\"height\", // Add `Tooltip.padding` so we don't crop tooltip text\n      // Add `BranchLabel.paddingY` so we don't crop branch label.\n      (height + Tooltip.padding + BranchLabel.paddingY).toString());\n    }\n\n    if (!this.state.shouldRecomputeOffsets) return;\n    if (!this.$commits.current) return;\n    this.positionCommitsElements();\n    var commits = Array.from(this.$commits.current.children);\n    this.setState({\n      commitYWithOffsets: this.computeOffsets(commits),\n      shouldRecomputeOffsets: false\n    });\n  };\n\n  Gitgraph.prototype.renderBranchesPaths = function () {\n    var _this = this;\n\n    var offset = this.gitgraph.template.commit.dot.size;\n    var isBezier = this.gitgraph.template.branch.mergeStyle === MergeStyle.Bezier;\n    return Array.from(this.state.branchesPaths).map(function (_a) {\n      var branch = _a[0],\n          coordinates = _a[1];\n      return React.createElement(\"path\", {\n        key: branch.name,\n        d: toSvgPath(coordinates.map(function (a) {\n          return a.map(function (b) {\n            return _this.getWithCommitOffset(b);\n          });\n        }), isBezier, _this.gitgraph.isVertical),\n        fill: \"transparent\",\n        stroke: branch.computedColor,\n        strokeWidth: branch.style.lineWidth,\n        transform: \"translate(\" + offset + \", \" + offset + \")\"\n      });\n    });\n  };\n\n  Gitgraph.prototype.renderCommits = function () {\n    var _this = this;\n\n    return React.createElement(\"g\", {\n      ref: this.$commits\n    }, this.state.commits.map(function (commit) {\n      return _this.renderCommit(commit);\n    }));\n  };\n\n  Gitgraph.prototype.renderCommit = function (commit) {\n    var _a = this.getWithCommitOffset(commit),\n        x = _a.x,\n        y = _a.y;\n\n    var shouldRenderTooltip = this.state.currentCommitOver === commit && (this.gitgraph.isHorizontal || this.gitgraph.mode === Mode.Compact && commit.style.hasTooltipInCompactMode);\n\n    if (shouldRenderTooltip) {\n      this.$tooltip = React.createElement(\"g\", {\n        key: commit.hashAbbrev,\n        transform: \"translate(\" + x + \", \" + y + \")\"\n      }, this.renderTooltip(commit));\n    }\n\n    return React.createElement(\"g\", {\n      key: commit.hashAbbrev,\n      transform: \"translate(\" + x + \", \" + y + \")\"\n    }, this.renderDot(commit), this.gitgraph.template.arrow.size && this.renderArrows(commit), React.createElement(\"g\", {\n      transform: \"translate(\" + -x + \", 0)\"\n    }, commit.style.message.display && this.renderMessage(commit), this.renderBranchLabels(commit), this.renderTags(commit)));\n  };\n\n  Gitgraph.prototype.renderTooltip = function (commit) {\n    if (commit.renderTooltip) {\n      return commit.renderTooltip(commit);\n    }\n\n    return React.createElement(Tooltip, {\n      commit: commit\n    }, commit.hashAbbrev, \" - \", commit.subject);\n  };\n\n  Gitgraph.prototype.renderDot = function (commit) {\n    var _this = this;\n\n    if (commit.renderDot) {\n      return commit.renderDot(commit);\n    }\n\n    return React.createElement(Dot, {\n      commit: commit,\n      onMouseOver: function () {\n        _this.setState({\n          currentCommitOver: commit\n        });\n\n        commit.onMouseOver();\n      },\n      onMouseOut: function () {\n        _this.setState({\n          currentCommitOver: null\n        });\n\n        _this.$tooltip = null;\n        commit.onMouseOut();\n      }\n    });\n  };\n\n  Gitgraph.prototype.renderArrows = function (commit) {\n    var _this = this;\n\n    var commitRadius = commit.style.dot.size;\n    return commit.parents.map(function (parentHash) {\n      var parent = _this.state.commits.find(function (_a) {\n        var hash = _a.hash;\n        return hash === parentHash;\n      });\n\n      if (!parent) return null; // Starting point, relative to commit\n\n      var origin = _this.gitgraph.reverseArrow ? {\n        x: commitRadius + (parent.x - commit.x),\n        y: commitRadius + (parent.y - commit.y)\n      } : {\n        x: commitRadius,\n        y: commitRadius\n      };\n      return React.createElement(\"g\", {\n        transform: \"translate(\" + origin.x + \", \" + origin.y + \")\"\n      }, React.createElement(\"path\", {\n        d: arrowSvgPath(_this.gitgraph, parent, commit),\n        fill: _this.gitgraph.template.arrow.color\n      }));\n    });\n  };\n\n  Gitgraph.prototype.renderMessage = function (commit) {\n    var ref = this.createMessageRef(commit);\n\n    if (commit.renderMessage) {\n      return React.createElement(\"g\", {\n        ref: ref\n      }, commit.renderMessage(commit));\n    }\n\n    var body = null;\n\n    if (commit.body) {\n      body = React.createElement(\"foreignObject\", {\n        width: \"600\",\n        x: \"10\"\n      }, React.createElement(\"p\", null, commit.body));\n    } // Use commit dot radius to align text with the middle of the dot.\n\n\n    var y = commit.style.dot.size;\n    return React.createElement(\"g\", {\n      ref: ref,\n      transform: \"translate(0, \" + y + \")\"\n    }, React.createElement(\"text\", {\n      alignmentBaseline: \"central\",\n      fill: commit.style.message.color,\n      style: {\n        font: commit.style.message.font\n      },\n      onClick: commit.onMessageClick\n    }, commit.message), body);\n  };\n\n  Gitgraph.prototype.renderBranchLabels = function (commit) {\n    var _this = this; // @gitgraph/core could compute branch labels into commits directly.\n    // That will make it easier to retrieve them, just like tags.\n\n\n    var branches = Array.from(this.gitgraph.branches.values());\n    return branches.map(function (branch) {\n      if (!branch.style.label.display) return null;\n\n      if (!_this.gitgraph.branchLabelOnEveryCommit) {\n        var commitHash = _this.gitgraph.refs.getCommit(branch.name);\n\n        if (commit.hash !== commitHash) return null;\n      } // For the moment, we don't handle multiple branch labels.\n      // To do so, we'd need to reposition each of them appropriately.\n\n\n      if (commit.branchToDisplay !== branch.name) return null;\n\n      var ref = _this.createBranchLabelRef(commit);\n\n      var branchLabel = branch.renderLabel ? branch.renderLabel(branch) : React.createElement(BranchLabel, {\n        branch: branch,\n        commit: commit\n      });\n\n      if (_this.gitgraph.isVertical) {\n        return React.createElement(\"g\", {\n          key: branch.name,\n          ref: ref\n        }, branchLabel);\n      } else {\n        var commitDotSize = commit.style.dot.size * 2;\n        var horizontalMarginTop = 10;\n        var y = commitDotSize + horizontalMarginTop;\n        return React.createElement(\"g\", {\n          key: branch.name,\n          ref: ref,\n          transform: \"translate(\" + commit.x + \", \" + y + \")\"\n        }, branchLabel);\n      }\n    });\n  };\n\n  Gitgraph.prototype.renderTags = function (commit) {\n    var _this = this;\n\n    if (!commit.tags) return null;\n    if (this.gitgraph.isHorizontal) return null;\n    return commit.tags.map(function (tag) {\n      var ref = _this.createTagRef(commit);\n\n      return React.createElement(\"g\", {\n        key: commit.hashAbbrev + \"-\" + tag.name,\n        ref: ref,\n        transform: \"translate(0, \" + commit.style.dot.size + \")\"\n      }, tag.render ? tag.render(tag.name, tag.style) : React.createElement(Tag, {\n        tag: tag\n      }));\n    });\n  };\n\n  Gitgraph.prototype.createBranchLabelRef = function (commit) {\n    var ref = React.createRef();\n\n    if (!this.commitsElements[commit.hashAbbrev]) {\n      this.initCommitElements(commit);\n    }\n\n    this.commitsElements[commit.hashAbbrev].branchLabel = ref;\n    return ref;\n  };\n\n  Gitgraph.prototype.createMessageRef = function (commit) {\n    var ref = React.createRef();\n\n    if (!this.commitsElements[commit.hashAbbrev]) {\n      this.initCommitElements(commit);\n    }\n\n    this.commitsElements[commit.hashAbbrev].message = ref;\n    return ref;\n  };\n\n  Gitgraph.prototype.createTagRef = function (commit) {\n    var ref = React.createRef();\n\n    if (!this.commitsElements[commit.hashAbbrev]) {\n      this.initCommitElements(commit);\n    }\n\n    this.commitsElements[commit.hashAbbrev].tags.push(ref);\n    return ref;\n  };\n\n  Gitgraph.prototype.initCommitElements = function (commit) {\n    this.commitsElements[commit.hashAbbrev] = {\n      branchLabel: null,\n      tags: [],\n      message: null\n    };\n  };\n\n  Gitgraph.prototype.positionCommitsElements = function () {\n    var _this = this;\n\n    if (this.gitgraph.isHorizontal) {\n      // Elements don't appear on horizontal mode, yet.\n      return;\n    }\n\n    var padding = 10; // Ensure commits elements (branch labels, message…) are well positionned.\n    // It can't be done at render time since elements size is dynamic.\n\n    Object.keys(this.commitsElements).forEach(function (commitHash) {\n      var _a = _this.commitsElements[commitHash],\n          branchLabel = _a.branchLabel,\n          tags = _a.tags,\n          message = _a.message; // We'll store X position progressively and translate elements.\n\n      var x = _this.state.commitMessagesX;\n\n      if (branchLabel && branchLabel.current) {\n        moveElement(branchLabel.current, x); // For some reason, one paddingX is missing in BBox width.\n\n        var branchLabelWidth = branchLabel.current.getBBox().width + BranchLabel.paddingX;\n        x += branchLabelWidth + padding;\n      }\n\n      tags.forEach(function (tag) {\n        if (!tag || !tag.current) return;\n        moveElement(tag.current, x); // For some reason, one paddingX is missing in BBox width.\n\n        var tagWidth = tag.current.getBBox().width + TAG_PADDING_X;\n        x += tagWidth + padding;\n      });\n\n      if (message && message.current) {\n        moveElement(message.current, x);\n      }\n    });\n  };\n\n  Gitgraph.prototype.computeOffsets = function (commits) {\n    var totalOffsetY = 0; // In VerticalReverse orientation, commits are in the same order in the DOM.\n\n    var orientedCommits = this.gitgraph.orientation === Orientation.VerticalReverse ? commits : commits.reverse();\n    return orientedCommits.reduce(function (newOffsets, commit) {\n      var commitY = parseInt(commit.getAttribute(\"transform\").split(\",\")[1].slice(0, -1), 10);\n      var firstForeignObject = commit.getElementsByTagName(\"foreignObject\")[0];\n      var customHtmlMessage = firstForeignObject && firstForeignObject.firstElementChild;\n      var messageHeight = 0;\n\n      if (customHtmlMessage) {\n        var height = customHtmlMessage.getBoundingClientRect().height;\n        var marginTopInPx = window.getComputedStyle(customHtmlMessage).marginTop || \"0px\";\n        var marginTop = parseInt(marginTopInPx.replace(\"px\", \"\"), 10);\n        messageHeight = height + marginTop;\n      } // Force the height of the foreignObject (browser issue)\n\n\n      if (firstForeignObject) {\n        firstForeignObject.setAttribute(\"height\", messageHeight + \"px\");\n      }\n\n      newOffsets[commitY] = commitY + totalOffsetY; // Increment total offset after setting the offset\n      // => offset next commits accordingly.\n\n      totalOffsetY += messageHeight;\n      return newOffsets;\n    }, {});\n  };\n\n  Gitgraph.prototype.getWithCommitOffset = function (_a) {\n    var x = _a.x,\n        y = _a.y;\n    return {\n      x: x,\n      y: this.state.commitYWithOffsets[y] || y\n    };\n  };\n\n  Gitgraph.defaultProps = {\n    options: {}\n  };\n  return Gitgraph;\n}(React.Component);\n\nfunction moveElement(target, x) {\n  var transform = target.getAttribute(\"transform\") || \"translate(0, 0)\";\n  target.setAttribute(\"transform\", transform.replace(/translate\\(([\\d\\.]+),/, \"translate(\" + x + \",\"));\n}","map":{"version":3,"sources":["../src/Gitgraph.tsx"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["var __extends = (this && this.__extends) || (function () {\n    var extendStatics = function (d, b) {\n        extendStatics = Object.setPrototypeOf ||\n            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\n        return extendStatics(d, b);\n    };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\nimport * as React from \"react\";\nimport { GitgraphCore, MergeStyle, Mode, Orientation, TemplateName, templateExtend, toSvgPath, arrowSvgPath, } from \"@gitgraph/core\";\nimport { BranchLabel } from \"./BranchLabel\";\nimport { Tooltip } from \"./Tooltip\";\nimport { Dot } from \"./Dot\";\nimport { Tag, TAG_PADDING_X } from \"./Tag\";\nexport { Gitgraph, TemplateName, templateExtend, MergeStyle, Mode, Orientation, };\nfunction isPropsWithGraph(props) {\n    return \"graph\" in props;\n}\nvar Gitgraph = /** @class */ (function (_super) {\n    __extends(Gitgraph, _super);\n    function Gitgraph(props) {\n        var _this = _super.call(this, props) || this;\n        _this.$graph = React.createRef();\n        _this.$commits = React.createRef();\n        _this.$tooltip = null;\n        _this.commitsElements = {};\n        _this.state = {\n            commits: [],\n            branchesPaths: new Map(),\n            commitMessagesX: 0,\n            commitYWithOffsets: {},\n            shouldRecomputeOffsets: true,\n            currentCommitOver: null,\n        };\n        _this.gitgraph = isPropsWithGraph(props)\n            ? props.graph\n            : new GitgraphCore(props.options);\n        _this.gitgraph.subscribe(function (data) {\n            var commits = data.commits, branchesPaths = data.branchesPaths, commitMessagesX = data.commitMessagesX;\n            _this.setState({\n                commits: commits,\n                branchesPaths: branchesPaths,\n                commitMessagesX: commitMessagesX,\n                shouldRecomputeOffsets: true,\n            });\n        });\n        return _this;\n    }\n    Gitgraph.prototype.render = function () {\n        return (React.createElement(\"svg\", { ref: this.$graph },\n            React.createElement(\"g\", { transform: \"translate(\" + BranchLabel.paddingX + \", \" + Tooltip.padding + \")\" },\n                this.renderBranchesPaths(),\n                this.renderCommits(),\n                this.$tooltip)));\n    };\n    Gitgraph.prototype.componentDidMount = function () {\n        if (isPropsWithGraph(this.props))\n            return;\n        this.props.children(this.gitgraph.getUserApi());\n    };\n    Gitgraph.prototype.componentDidUpdate = function () {\n        if (this.$graph.current) {\n            var _a = this.$graph.current.getBBox(), height = _a.height, width = _a.width;\n            this.$graph.current.setAttribute(\"width\", \n            // Add `Tooltip.padding` so we don't crop the tooltip text.\n            // Add `BranchLabel.paddingX` so we don't cut branch label.\n            (width + Tooltip.padding + BranchLabel.paddingX).toString());\n            this.$graph.current.setAttribute(\"height\", \n            // Add `Tooltip.padding` so we don't crop tooltip text\n            // Add `BranchLabel.paddingY` so we don't crop branch label.\n            (height + Tooltip.padding + BranchLabel.paddingY).toString());\n        }\n        if (!this.state.shouldRecomputeOffsets)\n            return;\n        if (!this.$commits.current)\n            return;\n        this.positionCommitsElements();\n        var commits = Array.from(this.$commits.current.children);\n        this.setState({\n            commitYWithOffsets: this.computeOffsets(commits),\n            shouldRecomputeOffsets: false,\n        });\n    };\n    Gitgraph.prototype.renderBranchesPaths = function () {\n        var _this = this;\n        var offset = this.gitgraph.template.commit.dot.size;\n        var isBezier = this.gitgraph.template.branch.mergeStyle === MergeStyle.Bezier;\n        return Array.from(this.state.branchesPaths).map(function (_a) {\n            var branch = _a[0], coordinates = _a[1];\n            return (React.createElement(\"path\", { key: branch.name, d: toSvgPath(coordinates.map(function (a) { return a.map(function (b) { return _this.getWithCommitOffset(b); }); }), isBezier, _this.gitgraph.isVertical), fill: \"transparent\", stroke: branch.computedColor, strokeWidth: branch.style.lineWidth, transform: \"translate(\" + offset + \", \" + offset + \")\" }));\n        });\n    };\n    Gitgraph.prototype.renderCommits = function () {\n        var _this = this;\n        return (React.createElement(\"g\", { ref: this.$commits }, this.state.commits.map(function (commit) { return _this.renderCommit(commit); })));\n    };\n    Gitgraph.prototype.renderCommit = function (commit) {\n        var _a = this.getWithCommitOffset(commit), x = _a.x, y = _a.y;\n        var shouldRenderTooltip = this.state.currentCommitOver === commit &&\n            (this.gitgraph.isHorizontal ||\n                (this.gitgraph.mode === Mode.Compact &&\n                    commit.style.hasTooltipInCompactMode));\n        if (shouldRenderTooltip) {\n            this.$tooltip = (React.createElement(\"g\", { key: commit.hashAbbrev, transform: \"translate(\" + x + \", \" + y + \")\" }, this.renderTooltip(commit)));\n        }\n        return (React.createElement(\"g\", { key: commit.hashAbbrev, transform: \"translate(\" + x + \", \" + y + \")\" },\n            this.renderDot(commit),\n            this.gitgraph.template.arrow.size && this.renderArrows(commit),\n            React.createElement(\"g\", { transform: \"translate(\" + -x + \", 0)\" },\n                commit.style.message.display && this.renderMessage(commit),\n                this.renderBranchLabels(commit),\n                this.renderTags(commit))));\n    };\n    Gitgraph.prototype.renderTooltip = function (commit) {\n        if (commit.renderTooltip) {\n            return commit.renderTooltip(commit);\n        }\n        return (React.createElement(Tooltip, { commit: commit },\n            commit.hashAbbrev,\n            \" - \",\n            commit.subject));\n    };\n    Gitgraph.prototype.renderDot = function (commit) {\n        var _this = this;\n        if (commit.renderDot) {\n            return commit.renderDot(commit);\n        }\n        return (React.createElement(Dot, { commit: commit, onMouseOver: function () {\n                _this.setState({ currentCommitOver: commit });\n                commit.onMouseOver();\n            }, onMouseOut: function () {\n                _this.setState({ currentCommitOver: null });\n                _this.$tooltip = null;\n                commit.onMouseOut();\n            } }));\n    };\n    Gitgraph.prototype.renderArrows = function (commit) {\n        var _this = this;\n        var commitRadius = commit.style.dot.size;\n        return commit.parents.map(function (parentHash) {\n            var parent = _this.state.commits.find(function (_a) {\n                var hash = _a.hash;\n                return hash === parentHash;\n            });\n            if (!parent)\n                return null;\n            // Starting point, relative to commit\n            var origin = _this.gitgraph.reverseArrow\n                ? {\n                    x: commitRadius + (parent.x - commit.x),\n                    y: commitRadius + (parent.y - commit.y),\n                }\n                : { x: commitRadius, y: commitRadius };\n            return (React.createElement(\"g\", { transform: \"translate(\" + origin.x + \", \" + origin.y + \")\" },\n                React.createElement(\"path\", { d: arrowSvgPath(_this.gitgraph, parent, commit), fill: _this.gitgraph.template.arrow.color })));\n        });\n    };\n    Gitgraph.prototype.renderMessage = function (commit) {\n        var ref = this.createMessageRef(commit);\n        if (commit.renderMessage) {\n            return React.createElement(\"g\", { ref: ref }, commit.renderMessage(commit));\n        }\n        var body = null;\n        if (commit.body) {\n            body = (React.createElement(\"foreignObject\", { width: \"600\", x: \"10\" },\n                React.createElement(\"p\", null, commit.body)));\n        }\n        // Use commit dot radius to align text with the middle of the dot.\n        var y = commit.style.dot.size;\n        return (React.createElement(\"g\", { ref: ref, transform: \"translate(0, \" + y + \")\" },\n            React.createElement(\"text\", { alignmentBaseline: \"central\", fill: commit.style.message.color, style: { font: commit.style.message.font }, onClick: commit.onMessageClick }, commit.message),\n            body));\n    };\n    Gitgraph.prototype.renderBranchLabels = function (commit) {\n        var _this = this;\n        // @gitgraph/core could compute branch labels into commits directly.\n        // That will make it easier to retrieve them, just like tags.\n        var branches = Array.from(this.gitgraph.branches.values());\n        return branches.map(function (branch) {\n            if (!branch.style.label.display)\n                return null;\n            if (!_this.gitgraph.branchLabelOnEveryCommit) {\n                var commitHash = _this.gitgraph.refs.getCommit(branch.name);\n                if (commit.hash !== commitHash)\n                    return null;\n            }\n            // For the moment, we don't handle multiple branch labels.\n            // To do so, we'd need to reposition each of them appropriately.\n            if (commit.branchToDisplay !== branch.name)\n                return null;\n            var ref = _this.createBranchLabelRef(commit);\n            var branchLabel = branch.renderLabel ? (branch.renderLabel(branch)) : (React.createElement(BranchLabel, { branch: branch, commit: commit }));\n            if (_this.gitgraph.isVertical) {\n                return (React.createElement(\"g\", { key: branch.name, ref: ref }, branchLabel));\n            }\n            else {\n                var commitDotSize = commit.style.dot.size * 2;\n                var horizontalMarginTop = 10;\n                var y = commitDotSize + horizontalMarginTop;\n                return (React.createElement(\"g\", { key: branch.name, ref: ref, transform: \"translate(\" + commit.x + \", \" + y + \")\" }, branchLabel));\n            }\n        });\n    };\n    Gitgraph.prototype.renderTags = function (commit) {\n        var _this = this;\n        if (!commit.tags)\n            return null;\n        if (this.gitgraph.isHorizontal)\n            return null;\n        return commit.tags.map(function (tag) {\n            var ref = _this.createTagRef(commit);\n            return (React.createElement(\"g\", { key: commit.hashAbbrev + \"-\" + tag.name, ref: ref, transform: \"translate(0, \" + commit.style.dot.size + \")\" }, tag.render ? tag.render(tag.name, tag.style) : React.createElement(Tag, { tag: tag })));\n        });\n    };\n    Gitgraph.prototype.createBranchLabelRef = function (commit) {\n        var ref = React.createRef();\n        if (!this.commitsElements[commit.hashAbbrev]) {\n            this.initCommitElements(commit);\n        }\n        this.commitsElements[commit.hashAbbrev].branchLabel = ref;\n        return ref;\n    };\n    Gitgraph.prototype.createMessageRef = function (commit) {\n        var ref = React.createRef();\n        if (!this.commitsElements[commit.hashAbbrev]) {\n            this.initCommitElements(commit);\n        }\n        this.commitsElements[commit.hashAbbrev].message = ref;\n        return ref;\n    };\n    Gitgraph.prototype.createTagRef = function (commit) {\n        var ref = React.createRef();\n        if (!this.commitsElements[commit.hashAbbrev]) {\n            this.initCommitElements(commit);\n        }\n        this.commitsElements[commit.hashAbbrev].tags.push(ref);\n        return ref;\n    };\n    Gitgraph.prototype.initCommitElements = function (commit) {\n        this.commitsElements[commit.hashAbbrev] = {\n            branchLabel: null,\n            tags: [],\n            message: null,\n        };\n    };\n    Gitgraph.prototype.positionCommitsElements = function () {\n        var _this = this;\n        if (this.gitgraph.isHorizontal) {\n            // Elements don't appear on horizontal mode, yet.\n            return;\n        }\n        var padding = 10;\n        // Ensure commits elements (branch labels, message…) are well positionned.\n        // It can't be done at render time since elements size is dynamic.\n        Object.keys(this.commitsElements).forEach(function (commitHash) {\n            var _a = _this.commitsElements[commitHash], branchLabel = _a.branchLabel, tags = _a.tags, message = _a.message;\n            // We'll store X position progressively and translate elements.\n            var x = _this.state.commitMessagesX;\n            if (branchLabel && branchLabel.current) {\n                moveElement(branchLabel.current, x);\n                // For some reason, one paddingX is missing in BBox width.\n                var branchLabelWidth = branchLabel.current.getBBox().width + BranchLabel.paddingX;\n                x += branchLabelWidth + padding;\n            }\n            tags.forEach(function (tag) {\n                if (!tag || !tag.current)\n                    return;\n                moveElement(tag.current, x);\n                // For some reason, one paddingX is missing in BBox width.\n                var tagWidth = tag.current.getBBox().width + TAG_PADDING_X;\n                x += tagWidth + padding;\n            });\n            if (message && message.current) {\n                moveElement(message.current, x);\n            }\n        });\n    };\n    Gitgraph.prototype.computeOffsets = function (commits) {\n        var totalOffsetY = 0;\n        // In VerticalReverse orientation, commits are in the same order in the DOM.\n        var orientedCommits = this.gitgraph.orientation === Orientation.VerticalReverse\n            ? commits\n            : commits.reverse();\n        return orientedCommits.reduce(function (newOffsets, commit) {\n            var commitY = parseInt(commit\n                .getAttribute(\"transform\")\n                .split(\",\")[1]\n                .slice(0, -1), 10);\n            var firstForeignObject = commit.getElementsByTagName(\"foreignObject\")[0];\n            var customHtmlMessage = firstForeignObject && firstForeignObject.firstElementChild;\n            var messageHeight = 0;\n            if (customHtmlMessage) {\n                var height = customHtmlMessage.getBoundingClientRect().height;\n                var marginTopInPx = window.getComputedStyle(customHtmlMessage).marginTop || \"0px\";\n                var marginTop = parseInt(marginTopInPx.replace(\"px\", \"\"), 10);\n                messageHeight = height + marginTop;\n            }\n            // Force the height of the foreignObject (browser issue)\n            if (firstForeignObject) {\n                firstForeignObject.setAttribute(\"height\", messageHeight + \"px\");\n            }\n            newOffsets[commitY] = commitY + totalOffsetY;\n            // Increment total offset after setting the offset\n            // => offset next commits accordingly.\n            totalOffsetY += messageHeight;\n            return newOffsets;\n        }, {});\n    };\n    Gitgraph.prototype.getWithCommitOffset = function (_a) {\n        var x = _a.x, y = _a.y;\n        return { x: x, y: this.state.commitYWithOffsets[y] || y };\n    };\n    Gitgraph.defaultProps = {\n        options: {},\n    };\n    return Gitgraph;\n}(React.Component));\nfunction moveElement(target, x) {\n    var transform = target.getAttribute(\"transform\") || \"translate(0, 0)\";\n    target.setAttribute(\"transform\", transform.replace(/translate\\(([\\d\\.]+),/, \"translate(\" + x + \",\"));\n}\n//# sourceMappingURL=Gitgraph.js.map"]},"metadata":{},"sourceType":"module"}