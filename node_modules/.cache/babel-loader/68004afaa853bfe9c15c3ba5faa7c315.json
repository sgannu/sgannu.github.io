{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/sgannu/projects/sgannu.github.io/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/sgannu/projects/sgannu.github.io/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar BranchesOrder =\n/*#__PURE__*/\nfunction () {\n  function BranchesOrder(commits, colors, compareFunction) {\n    var _this = this;\n\n    _classCallCheck(this, BranchesOrder);\n\n    this.branches = new Set();\n    this.colors = colors;\n    commits.forEach(function (commit) {\n      return _this.branches.add(commit.branchToDisplay);\n    });\n\n    if (compareFunction) {\n      this.branches = new Set(Array.from(this.branches).sort(compareFunction));\n    }\n  }\n  /**\n   * Return the order of the given branch name.\n   *\n   * @param branchName Name of the branch\n   */\n\n\n  _createClass(BranchesOrder, [{\n    key: \"get\",\n    value: function get(branchName) {\n      return Array.from(this.branches).findIndex(function (branch) {\n        return branch === branchName;\n      });\n    }\n    /**\n     * Return the color of the given branch.\n     *\n     * @param branchName Name of the branch\n     */\n\n  }, {\n    key: \"getColorOf\",\n    value: function getColorOf(branchName) {\n      return this.colors[this.get(branchName) % this.colors.length];\n    }\n  }]);\n\n  return BranchesOrder;\n}();\n\nexports.BranchesOrder = BranchesOrder;","map":{"version":3,"sources":["../src/branches-order.ts"],"names":[],"mappings":";;;;;;;;;;IAoBM,a;;;AAIJ,yBACE,OADF,EAEE,MAFF,EAGE,eAHF,EAGmD;AAAA;;AAAA;;AAN3C,SAAA,QAAA,GAAgC,IAAI,GAAJ,EAAhC;AAQN,SAAK,MAAL,GAAc,MAAd;AACA,IAAA,OAAO,CAAC,OAAR,CAAgB,UAAC,MAAD;AAAA,aAAY,KAAI,CAAC,QAAL,CAAc,GAAd,CAAkB,MAAM,CAAC,eAAzB,CAAZ;AAAA,KAAhB;;AAEA,QAAI,eAAJ,EAAqB;AACnB,WAAK,QAAL,GAAgB,IAAI,GAAJ,CAAQ,KAAK,CAAC,IAAN,CAAW,KAAK,QAAhB,EAA0B,IAA1B,CAA+B,eAA/B,CAAR,CAAhB;AACD;AACF;AAED;;;;;;;;;wBAKW,U,EAA0B;AACnC,aAAO,KAAK,CAAC,IAAN,CAAW,KAAK,QAAhB,EAA0B,SAA1B,CACL,UAAC,MAAD;AAAA,eAAY,MAAM,KAAK,UAAvB;AAAA,OADK,CAAP;AAGD;AAED;;;;;;;;+BAKkB,U,EAA0B;AAC1C,aAAO,KAAK,MAAL,CAAY,KAAK,GAAL,CAAS,UAAT,IAAuB,KAAK,MAAL,CAAY,MAA/C,CAAP;AACD;;;;;;AApDM,OAAA,CAAA,aAAA,GAAA,aAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass BranchesOrder {\n    constructor(commits, colors, compareFunction) {\n        this.branches = new Set();\n        this.colors = colors;\n        commits.forEach((commit) => this.branches.add(commit.branchToDisplay));\n        if (compareFunction) {\n            this.branches = new Set(Array.from(this.branches).sort(compareFunction));\n        }\n    }\n    /**\n     * Return the order of the given branch name.\n     *\n     * @param branchName Name of the branch\n     */\n    get(branchName) {\n        return Array.from(this.branches).findIndex((branch) => branch === branchName);\n    }\n    /**\n     * Return the color of the given branch.\n     *\n     * @param branchName Name of the branch\n     */\n    getColorOf(branchName) {\n        return this.colors[this.get(branchName) % this.colors.length];\n    }\n}\nexports.BranchesOrder = BranchesOrder;\n//# sourceMappingURL=branches-order.js.map"]},"metadata":{},"sourceType":"script"}