{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nclass Refs {\n  constructor() {\n    this.commitPerName = new Map();\n    this.namesPerCommit = new Map();\n  }\n  /**\n   * Set a new reference to a commit hash.\n   *\n   * @param name Name of the ref (ex: \"master\", \"v1.0\")\n   * @param commitHash Commit hash\n   */\n\n\n  set(name, commitHash) {\n    const prevCommitHash = this.commitPerName.get(name);\n\n    if (prevCommitHash) {\n      this.removeNameFrom(prevCommitHash, name);\n    }\n\n    this.addNameTo(commitHash, name);\n    this.addCommitTo(name, commitHash);\n    return this;\n  }\n  /**\n   * Get the commit hash associated with the given reference name.\n   *\n   * @param name Name of the ref\n   */\n\n\n  getCommit(name) {\n    return this.commitPerName.get(name);\n  }\n  /**\n   * Get the list of reference names associated with given commit hash.\n   *\n   * @param commitHash Commit hash\n   */\n\n\n  getNames(commitHash) {\n    return this.namesPerCommit.get(commitHash) || [];\n  }\n  /**\n   * Get all reference names known.\n   */\n\n\n  getAllNames() {\n    return Array.from(this.commitPerName.keys());\n  }\n  /**\n   * Returns true if given commit hash is referenced.\n   *\n   * @param commitHash Commit hash\n   */\n\n\n  hasCommit(commitHash) {\n    return this.namesPerCommit.has(commitHash);\n  }\n  /**\n   * Returns true if given reference name exists.\n   *\n   * @param name Name of the ref\n   */\n\n\n  hasName(name) {\n    return this.commitPerName.has(name);\n  }\n\n  removeNameFrom(commitHash, nameToRemove) {\n    const names = this.namesPerCommit.get(commitHash) || [];\n    this.namesPerCommit.set(commitHash, names.filter(name => name !== nameToRemove));\n  }\n\n  addNameTo(commitHash, nameToAdd) {\n    const prevNames = this.namesPerCommit.get(commitHash) || [];\n    this.namesPerCommit.set(commitHash, [...prevNames, nameToAdd]);\n  }\n\n  addCommitTo(name, commitHashToAdd) {\n    this.commitPerName.set(name, commitHashToAdd);\n  }\n\n}\n\nexports.Refs = Refs;","map":{"version":3,"sources":["../src/refs.ts"],"names":[],"mappings":";;;;;;AAMA,MAAM,IAAN,CAAU;AAAV,EAAA,WAAA,GAAA;AACU,SAAA,aAAA,GAAgB,IAAI,GAAJ,EAAhB;AACA,SAAA,cAAA,GAAiB,IAAI,GAAJ,EAAjB;AAgFT;AA9EC;;;;;;;;AAMO,EAAA,GAAG,CAAC,IAAD,EAAa,UAAb,EAAuC;AAC/C,UAAM,cAAc,GAAG,KAAK,aAAL,CAAmB,GAAnB,CAAuB,IAAvB,CAAvB;;AACA,QAAI,cAAJ,EAAoB;AAClB,WAAK,cAAL,CAAoB,cAApB,EAAoC,IAApC;AACD;;AAED,SAAK,SAAL,CAAe,UAAf,EAA2B,IAA3B;AACA,SAAK,WAAL,CAAiB,IAAjB,EAAuB,UAAvB;AAEA,WAAO,IAAP;AACD;AAED;;;;;;;AAKO,EAAA,SAAS,CAAC,IAAD,EAAW;AACzB,WAAO,KAAK,aAAL,CAAmB,GAAnB,CAAuB,IAAvB,CAAP;AACD;AAED;;;;;;;AAKO,EAAA,QAAQ,CAAC,UAAD,EAA2B;AACxC,WAAO,KAAK,cAAL,CAAoB,GAApB,CAAwB,UAAxB,KAAuC,EAA9C;AACD;AAED;;;;;AAGO,EAAA,WAAW,GAAA;AAChB,WAAO,KAAK,CAAC,IAAN,CAAW,KAAK,aAAL,CAAmB,IAAnB,EAAX,CAAP;AACD;AAED;;;;;;;AAKO,EAAA,SAAS,CAAC,UAAD,EAA2B;AACzC,WAAO,KAAK,cAAL,CAAoB,GAApB,CAAwB,UAAxB,CAAP;AACD;AAED;;;;;;;AAKO,EAAA,OAAO,CAAC,IAAD,EAAW;AACvB,WAAO,KAAK,aAAL,CAAmB,GAAnB,CAAuB,IAAvB,CAAP;AACD;;AAEO,EAAA,cAAc,CAAC,UAAD,EAA6B,YAA7B,EAA+C;AACnE,UAAM,KAAK,GAAG,KAAK,cAAL,CAAoB,GAApB,CAAwB,UAAxB,KAAuC,EAArD;AAEA,SAAK,cAAL,CAAoB,GAApB,CACE,UADF,EAEE,KAAK,CAAC,MAAN,CAAc,IAAD,IAAU,IAAI,KAAK,YAAhC,CAFF;AAID;;AAEO,EAAA,SAAS,CAAC,UAAD,EAA6B,SAA7B,EAA4C;AAC3D,UAAM,SAAS,GAAG,KAAK,cAAL,CAAoB,GAApB,CAAwB,UAAxB,KAAuC,EAAzD;AACA,SAAK,cAAL,CAAoB,GAApB,CAAwB,UAAxB,EAAoC,CAAC,GAAG,SAAJ,EAAe,SAAf,CAApC;AACD;;AAEO,EAAA,WAAW,CAAC,IAAD,EAAa,eAAb,EAA4C;AAC7D,SAAK,aAAL,CAAmB,GAAnB,CAAuB,IAAvB,EAA6B,eAA7B;AACD;;AAjFO;;AAJD,OAAA,CAAA,IAAA,GAAA,IAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass Refs {\n    constructor() {\n        this.commitPerName = new Map();\n        this.namesPerCommit = new Map();\n    }\n    /**\n     * Set a new reference to a commit hash.\n     *\n     * @param name Name of the ref (ex: \"master\", \"v1.0\")\n     * @param commitHash Commit hash\n     */\n    set(name, commitHash) {\n        const prevCommitHash = this.commitPerName.get(name);\n        if (prevCommitHash) {\n            this.removeNameFrom(prevCommitHash, name);\n        }\n        this.addNameTo(commitHash, name);\n        this.addCommitTo(name, commitHash);\n        return this;\n    }\n    /**\n     * Get the commit hash associated with the given reference name.\n     *\n     * @param name Name of the ref\n     */\n    getCommit(name) {\n        return this.commitPerName.get(name);\n    }\n    /**\n     * Get the list of reference names associated with given commit hash.\n     *\n     * @param commitHash Commit hash\n     */\n    getNames(commitHash) {\n        return this.namesPerCommit.get(commitHash) || [];\n    }\n    /**\n     * Get all reference names known.\n     */\n    getAllNames() {\n        return Array.from(this.commitPerName.keys());\n    }\n    /**\n     * Returns true if given commit hash is referenced.\n     *\n     * @param commitHash Commit hash\n     */\n    hasCommit(commitHash) {\n        return this.namesPerCommit.has(commitHash);\n    }\n    /**\n     * Returns true if given reference name exists.\n     *\n     * @param name Name of the ref\n     */\n    hasName(name) {\n        return this.commitPerName.has(name);\n    }\n    removeNameFrom(commitHash, nameToRemove) {\n        const names = this.namesPerCommit.get(commitHash) || [];\n        this.namesPerCommit.set(commitHash, names.filter((name) => name !== nameToRemove));\n    }\n    addNameTo(commitHash, nameToAdd) {\n        const prevNames = this.namesPerCommit.get(commitHash) || [];\n        this.namesPerCommit.set(commitHash, [...prevNames, nameToAdd]);\n    }\n    addCommitTo(name, commitHashToAdd) {\n        this.commitPerName.set(name, commitHashToAdd);\n    }\n}\nexports.Refs = Refs;\n//# sourceMappingURL=refs.js.map"]},"metadata":{},"sourceType":"script"}