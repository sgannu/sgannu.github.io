{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst commit_1 = require(\"../commit\");\n\nconst branch_1 = require(\"../branch\");\n\nconst refs_1 = require(\"../refs\");\n\nclass GitgraphUserApi {\n  // tslint:enable:variable-name\n  constructor(graph, onGraphUpdate) {\n    this._graph = graph;\n    this._onGraphUpdate = onGraphUpdate;\n  }\n  /**\n   * Clear everything (as `rm -rf .git && git init`).\n   */\n\n\n  clear() {\n    this._graph.refs = new refs_1.Refs();\n    this._graph.tags = new refs_1.Refs();\n    this._graph.commits = [];\n    this._graph.branches = new Map();\n    this._graph.currentBranch = this._graph.createBranch(\"master\");\n\n    this._onGraphUpdate();\n\n    return this;\n  }\n\n  commit(options) {\n    this._graph.currentBranch.getUserApi().commit(options);\n\n    return this;\n  }\n\n  branch(args) {\n    return this._graph.createBranch(args).getUserApi();\n  }\n\n  tag(...args) {\n    // Deal with shorter syntax\n    let name;\n    let ref;\n    let style;\n    let render;\n\n    if (typeof args[0] === \"string\") {\n      name = args[0];\n      ref = args[1];\n    } else {\n      name = args[0].name;\n      ref = args[0].ref;\n      style = args[0].style;\n      render = args[0].render;\n    }\n\n    if (!ref) {\n      const head = this._graph.refs.getCommit(\"HEAD\");\n\n      if (!head) return this;\n      ref = head;\n    }\n\n    let commitHash;\n\n    if (this._graph.refs.hasCommit(ref)) {\n      // `ref` is a `Commit[\"hash\"]`\n      commitHash = ref;\n    }\n\n    if (this._graph.refs.hasName(ref)) {\n      // `ref` is a `Branch[\"name\"]`\n      commitHash = this._graph.refs.getCommit(ref);\n    }\n\n    if (!commitHash) {\n      throw new Error(`The ref \"${ref}\" does not exist`);\n    }\n\n    this._graph.tags.set(name, commitHash);\n\n    this._graph.tagStyles[name] = style;\n    this._graph.tagRenders[name] = render;\n\n    this._onGraphUpdate();\n\n    return this;\n  }\n  /**\n   * Import a JSON.\n   *\n   * Data can't be typed since it comes from a JSON.\n   * We validate input format and throw early if something is invalid.\n   *\n   * @experimental\n   * @param data JSON from `git2json` output\n   */\n\n\n  import(data) {\n    const invalidData = new Error(\"Only `git2json` format is supported for imported data.\"); // We manually validate input data instead of using a lib like yup.\n    // => this is to keep bundlesize small.\n\n    if (!Array.isArray(data)) {\n      throw invalidData;\n    }\n\n    const areDataValid = data.every(options => {\n      return typeof options === \"object\" && typeof options.author === \"object\" && Array.isArray(options.refs);\n    });\n\n    if (!areDataValid) {\n      throw invalidData;\n    }\n\n    const commitOptionsList = data.map(options => Object.assign({}, options, {\n      style: Object.assign({}, this._graph.template.commit, {\n        message: Object.assign({}, this._graph.template.commit.message, {\n          display: this._graph.shouldDisplayCommitMessage\n        })\n      }),\n      author: `${options.author.name} <${options.author.email}>`\n    })) // Git2json outputs is reverse-chronological.\n    // We need to commit it chronological order.\n    .reverse(); // Use validated `value`.\n\n    this.clear();\n    this._graph.commits = commitOptionsList.map(options => new commit_1.Commit(options)); // Create tags & refs.\n\n    commitOptionsList.forEach(({\n      refs,\n      hash\n    }) => {\n      if (!refs) return;\n      if (!hash) return;\n      const TAG_PREFIX = \"tag: \";\n      const tags = refs.map(ref => ref.split(TAG_PREFIX)).map(([_, tag]) => tag).filter(tag => typeof tag === \"string\");\n      tags.forEach(tag => this._graph.tags.set(tag, hash));\n      refs.filter(ref => !ref.startsWith(TAG_PREFIX)).forEach(ref => this._graph.refs.set(ref, hash));\n    }); // Create branches.\n\n    const branches = this._getBranches();\n\n    this._graph.commits.map(commit => this._withBranches(branches, commit)).reduce((mem, commit) => {\n      if (!commit.branches) return mem;\n      commit.branches.forEach(branch => mem.add(branch));\n      return mem;\n    }, new Set()).forEach(branch => this.branch(branch));\n\n    this._onGraphUpdate();\n\n    return this;\n  } // tslint:disable:variable-name - Prefix `_` = explicitly private for JS users\n  // TODO: get rid of these duplicated private methods.\n  //\n  // These belong to Gitgraph. It is duplicated because of `import()`.\n  // `import()` should use regular user API instead.\n\n\n  _withBranches(branches, commit) {\n    let commitBranches = Array.from((branches.get(commit.hash) || new Set()).values());\n\n    if (commitBranches.length === 0) {\n      // No branch => branch has been deleted.\n      commitBranches = [branch_1.DELETED_BRANCH_NAME];\n    }\n\n    return commit.setBranches(commitBranches);\n  }\n\n  _getBranches() {\n    const result = new Map();\n    const queue = [];\n\n    const branches = this._graph.refs.getAllNames().filter(name => name !== \"HEAD\");\n\n    branches.forEach(branch => {\n      const commitHash = this._graph.refs.getCommit(branch);\n\n      if (commitHash) {\n        queue.push(commitHash);\n      }\n\n      while (queue.length > 0) {\n        const currentHash = queue.pop();\n\n        const current = this._graph.commits.find(({\n          hash\n        }) => hash === currentHash);\n\n        const prevBranches = result.get(currentHash) || new Set();\n        prevBranches.add(branch);\n        result.set(currentHash, prevBranches);\n\n        if (current.parents.length > 0) {\n          queue.push(current.parents[0]);\n        }\n      }\n    });\n    return result;\n  }\n\n}\n\nexports.GitgraphUserApi = GitgraphUserApi;","map":{"version":3,"sources":["../../src/user-api/gitgraph-user-api.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst commit_1 = require(\"../commit\");\nconst branch_1 = require(\"../branch\");\nconst refs_1 = require(\"../refs\");\nclass GitgraphUserApi {\n    // tslint:enable:variable-name\n    constructor(graph, onGraphUpdate) {\n        this._graph = graph;\n        this._onGraphUpdate = onGraphUpdate;\n    }\n    /**\n     * Clear everything (as `rm -rf .git && git init`).\n     */\n    clear() {\n        this._graph.refs = new refs_1.Refs();\n        this._graph.tags = new refs_1.Refs();\n        this._graph.commits = [];\n        this._graph.branches = new Map();\n        this._graph.currentBranch = this._graph.createBranch(\"master\");\n        this._onGraphUpdate();\n        return this;\n    }\n    commit(options) {\n        this._graph.currentBranch.getUserApi().commit(options);\n        return this;\n    }\n    branch(args) {\n        return this._graph.createBranch(args).getUserApi();\n    }\n    tag(...args) {\n        // Deal with shorter syntax\n        let name;\n        let ref;\n        let style;\n        let render;\n        if (typeof args[0] === \"string\") {\n            name = args[0];\n            ref = args[1];\n        }\n        else {\n            name = args[0].name;\n            ref = args[0].ref;\n            style = args[0].style;\n            render = args[0].render;\n        }\n        if (!ref) {\n            const head = this._graph.refs.getCommit(\"HEAD\");\n            if (!head)\n                return this;\n            ref = head;\n        }\n        let commitHash;\n        if (this._graph.refs.hasCommit(ref)) {\n            // `ref` is a `Commit[\"hash\"]`\n            commitHash = ref;\n        }\n        if (this._graph.refs.hasName(ref)) {\n            // `ref` is a `Branch[\"name\"]`\n            commitHash = this._graph.refs.getCommit(ref);\n        }\n        if (!commitHash) {\n            throw new Error(`The ref \"${ref}\" does not exist`);\n        }\n        this._graph.tags.set(name, commitHash);\n        this._graph.tagStyles[name] = style;\n        this._graph.tagRenders[name] = render;\n        this._onGraphUpdate();\n        return this;\n    }\n    /**\n     * Import a JSON.\n     *\n     * Data can't be typed since it comes from a JSON.\n     * We validate input format and throw early if something is invalid.\n     *\n     * @experimental\n     * @param data JSON from `git2json` output\n     */\n    import(data) {\n        const invalidData = new Error(\"Only `git2json` format is supported for imported data.\");\n        // We manually validate input data instead of using a lib like yup.\n        // => this is to keep bundlesize small.\n        if (!Array.isArray(data)) {\n            throw invalidData;\n        }\n        const areDataValid = data.every((options) => {\n            return (typeof options === \"object\" &&\n                typeof options.author === \"object\" &&\n                Array.isArray(options.refs));\n        });\n        if (!areDataValid) {\n            throw invalidData;\n        }\n        const commitOptionsList = data\n            .map((options) => (Object.assign({}, options, { style: Object.assign({}, this._graph.template.commit, { message: Object.assign({}, this._graph.template.commit.message, { display: this._graph.shouldDisplayCommitMessage }) }), author: `${options.author.name} <${options.author.email}>` })))\n            // Git2json outputs is reverse-chronological.\n            // We need to commit it chronological order.\n            .reverse();\n        // Use validated `value`.\n        this.clear();\n        this._graph.commits = commitOptionsList.map((options) => new commit_1.Commit(options));\n        // Create tags & refs.\n        commitOptionsList.forEach(({ refs, hash }) => {\n            if (!refs)\n                return;\n            if (!hash)\n                return;\n            const TAG_PREFIX = \"tag: \";\n            const tags = refs\n                .map((ref) => ref.split(TAG_PREFIX))\n                .map(([_, tag]) => tag)\n                .filter((tag) => typeof tag === \"string\");\n            tags.forEach((tag) => this._graph.tags.set(tag, hash));\n            refs\n                .filter((ref) => !ref.startsWith(TAG_PREFIX))\n                .forEach((ref) => this._graph.refs.set(ref, hash));\n        });\n        // Create branches.\n        const branches = this._getBranches();\n        this._graph.commits\n            .map((commit) => this._withBranches(branches, commit))\n            .reduce((mem, commit) => {\n            if (!commit.branches)\n                return mem;\n            commit.branches.forEach((branch) => mem.add(branch));\n            return mem;\n        }, new Set())\n            .forEach((branch) => this.branch(branch));\n        this._onGraphUpdate();\n        return this;\n    }\n    // tslint:disable:variable-name - Prefix `_` = explicitly private for JS users\n    // TODO: get rid of these duplicated private methods.\n    //\n    // These belong to Gitgraph. It is duplicated because of `import()`.\n    // `import()` should use regular user API instead.\n    _withBranches(branches, commit) {\n        let commitBranches = Array.from((branches.get(commit.hash) || new Set()).values());\n        if (commitBranches.length === 0) {\n            // No branch => branch has been deleted.\n            commitBranches = [branch_1.DELETED_BRANCH_NAME];\n        }\n        return commit.setBranches(commitBranches);\n    }\n    _getBranches() {\n        const result = new Map();\n        const queue = [];\n        const branches = this._graph.refs\n            .getAllNames()\n            .filter((name) => name !== \"HEAD\");\n        branches.forEach((branch) => {\n            const commitHash = this._graph.refs.getCommit(branch);\n            if (commitHash) {\n                queue.push(commitHash);\n            }\n            while (queue.length > 0) {\n                const currentHash = queue.pop();\n                const current = this._graph.commits.find(({ hash }) => hash === currentHash);\n                const prevBranches = result.get(currentHash) || new Set();\n                prevBranches.add(branch);\n                result.set(currentHash, prevBranches);\n                if (current.parents.length > 0) {\n                    queue.push(current.parents[0]);\n                }\n            }\n        });\n        return result;\n    }\n}\nexports.GitgraphUserApi = GitgraphUserApi;\n//# sourceMappingURL=gitgraph-user-api.js.map"]},"metadata":{},"sourceType":"script"}