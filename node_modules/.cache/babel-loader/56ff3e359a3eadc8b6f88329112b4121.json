{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/sgannu/projects/sgannu.github.io/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _classCallCheck = require(\"/Users/sgannu/projects/sgannu.github.io/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/sgannu/projects/sgannu.github.io/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar branch_1 = require(\"./branch\");\n\nvar graph_rows_1 = require(\"./graph-rows\");\n\nvar mode_1 = require(\"./mode\");\n\nvar branches_order_1 = require(\"./branches-order\");\n\nvar template_1 = require(\"./template\");\n\nvar refs_1 = require(\"./refs\");\n\nvar branches_paths_1 = require(\"./branches-paths\");\n\nvar utils_1 = require(\"./utils\");\n\nvar orientation_1 = require(\"./orientation\");\n\nvar gitgraph_user_api_1 = require(\"./user-api/gitgraph-user-api\");\n\nvar GitgraphCore =\n/*#__PURE__*/\nfunction () {\n  function GitgraphCore() {\n    var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n    _classCallCheck(this, GitgraphCore);\n\n    this.refs = new refs_1.Refs();\n    this.tags = new refs_1.Refs();\n    this.tagStyles = {};\n    this.tagRenders = {};\n    this.commits = [];\n    this.branches = new Map();\n    this.listeners = [];\n    this.nextTimeoutId = null;\n    this.template = template_1.getTemplate(options.template); // Set a default `master` branch\n\n    this.currentBranch = this.createBranch(\"master\"); // Set all options with default values\n\n    this.orientation = options.orientation;\n    this.reverseArrow = utils_1.booleanOptionOr(options.reverseArrow, false);\n    this.initCommitOffsetX = utils_1.numberOptionOr(options.initCommitOffsetX, 0);\n    this.initCommitOffsetY = utils_1.numberOptionOr(options.initCommitOffsetY, 0);\n    this.mode = options.mode;\n    this.author = options.author || \"Sergio Flores <saxo-guy@epic.com>\";\n    this.commitMessage = options.commitMessage || \"He doesn't like George Michael! Boooo!\";\n    this.generateCommitHash = typeof options.generateCommitHash === \"function\" ? options.generateCommitHash : function () {\n      return undefined;\n    };\n    this.branchesOrderFunction = typeof options.compareBranchesOrder === \"function\" ? options.compareBranchesOrder : undefined;\n    this.branchLabelOnEveryCommit = utils_1.booleanOptionOr(options.branchLabelOnEveryCommit, false);\n  }\n\n  _createClass(GitgraphCore, [{\n    key: \"getUserApi\",\n\n    /**\n     * Return the API to manipulate Gitgraph as a user.\n     * Rendering library should give that API to their consumer.\n     */\n    value: function getUserApi() {\n      var _this = this;\n\n      return new gitgraph_user_api_1.GitgraphUserApi(this, function () {\n        return _this.next();\n      });\n    }\n    /**\n     * Add a change listener.\n     * It will be called any time the graph have changed (commit, mergeâ€¦).\n     *\n     * @param listener A callback to be invoked on every change.\n     * @returns A function to remove this change listener.\n     */\n\n  }, {\n    key: \"subscribe\",\n    value: function subscribe(listener) {\n      var _this2 = this;\n\n      this.listeners.push(listener);\n      var isSubscribed = true;\n      return function () {\n        if (!isSubscribed) return;\n        isSubscribed = false;\n\n        var index = _this2.listeners.indexOf(listener);\n\n        _this2.listeners.splice(index, 1);\n      };\n    }\n    /**\n     * Return all data required for rendering.\n     * Rendering libraries will use this to implement their rendering strategy.\n     */\n\n  }, {\n    key: \"getRenderedData\",\n    value: function getRenderedData() {\n      var commits = this.computeRenderedCommits();\n      var branchesPaths = this.computeRenderedBranchesPaths(commits);\n      var commitMessagesX = this.computeCommitMessagesX(branchesPaths);\n      this.computeBranchesColor(commits, branchesPaths);\n      return {\n        commits: commits,\n        branchesPaths: branchesPaths,\n        commitMessagesX: commitMessagesX\n      };\n    }\n  }, {\n    key: \"createBranch\",\n    value: function createBranch(args) {\n      var _this3 = this;\n\n      var defaultParentBranchName = \"HEAD\";\n      var options = {\n        gitgraph: this,\n        name: \"\",\n        parentCommitHash: this.refs.getCommit(defaultParentBranchName),\n        style: this.template.branch,\n        onGraphUpdate: function onGraphUpdate() {\n          return _this3.next();\n        }\n      };\n\n      if (typeof args === \"string\") {\n        options.name = args;\n        options.parentCommitHash = this.refs.getCommit(defaultParentBranchName);\n      } else {\n        var parentBranchName = args.from ? args.from.name : defaultParentBranchName;\n        var parentCommitHash = this.refs.getCommit(parentBranchName) || (this.refs.hasCommit(args.from) ? args.from : undefined);\n        args.style = args.style || {};\n        options = Object.assign({}, options, args, {\n          parentCommitHash: parentCommitHash,\n          style: Object.assign({}, options.style, args.style, {\n            label: Object.assign({}, options.style.label, args.style.label)\n          })\n        });\n      }\n\n      var branch = new branch_1.Branch(options);\n      this.branches.set(branch.name, branch);\n      return branch;\n    }\n    /**\n     * Return commits with data for rendering.\n     */\n\n  }, {\n    key: \"computeRenderedCommits\",\n    value: function computeRenderedCommits() {\n      var _this4 = this;\n\n      var branches = this.getBranches();\n      var commitsWithBranches = this.commits.map(function (commit) {\n        return _this4.withBranches(branches, commit);\n      });\n      var rows = graph_rows_1.createGraphRows(this.mode, this.commits);\n      var branchesOrder = new branches_order_1.BranchesOrder(commitsWithBranches, this.template.colors, this.branchesOrderFunction);\n      return commitsWithBranches.map(function (commit) {\n        return commit.setRefs(_this4.refs);\n      }).map(function (commit) {\n        return _this4.withPosition(rows, branchesOrder, commit);\n      }) // Fallback commit computed color on branch color.\n      .map(function (commit) {\n        return commit.withDefaultColor(_this4.getBranchDefaultColor(branchesOrder, commit.branchToDisplay));\n      }) // Tags need commit style to be computed (with default color).\n      .map(function (commit) {\n        return commit.setTags(_this4.tags, function (name) {\n          return Object.assign({}, _this4.tagStyles[name], _this4.template.tag);\n        }, function (name) {\n          return _this4.tagRenders[name];\n        });\n      });\n    }\n    /**\n     * Return branches paths with all data required for rendering.\n     *\n     * @param commits List of commits with rendering data computed\n     */\n\n  }, {\n    key: \"computeRenderedBranchesPaths\",\n    value: function computeRenderedBranchesPaths(commits) {\n      var _this5 = this;\n\n      return new branches_paths_1.BranchesPathsCalculator(commits, this.branches, this.template.commit.spacing, this.isVertical, this.isReverse, function () {\n        return branch_1.createDeletedBranch(_this5, _this5.template.branch, function () {\n          return _this5.next();\n        });\n      }).execute();\n    }\n    /**\n     * Set branches colors based on branches paths.\n     *\n     * @param commits List of graph commits\n     * @param branchesPaths Branches paths to be rendered\n     */\n\n  }, {\n    key: \"computeBranchesColor\",\n    value: function computeBranchesColor(commits, branchesPaths) {\n      var _this6 = this;\n\n      var branchesOrder = new branches_order_1.BranchesOrder(commits, this.template.colors, this.branchesOrderFunction);\n      Array.from(branchesPaths).forEach(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 1),\n            branch = _ref2[0];\n\n        branch.computedColor = branch.style.color || _this6.getBranchDefaultColor(branchesOrder, branch.name);\n      });\n    }\n    /**\n     * Return commit messages X position for rendering.\n     *\n     * @param branchesPaths Branches paths to be rendered\n     */\n\n  }, {\n    key: \"computeCommitMessagesX\",\n    value: function computeCommitMessagesX(branchesPaths) {\n      var numberOfColumns = Array.from(branchesPaths).length;\n      return numberOfColumns * this.template.branch.spacing;\n    }\n    /**\n     * Add `branches` property to commit.\n     *\n     * @param branches All branches mapped by commit hash\n     * @param commit Commit\n     */\n\n  }, {\n    key: \"withBranches\",\n    value: function withBranches(branches, commit) {\n      var commitBranches = Array.from((branches.get(commit.hash) || new Set()).values());\n\n      if (commitBranches.length === 0) {\n        // No branch => branch has been deleted.\n        commitBranches = [branch_1.DELETED_BRANCH_NAME];\n      }\n\n      return commit.setBranches(commitBranches);\n    }\n    /**\n     * Get all branches from current commits.\n     */\n\n  }, {\n    key: \"getBranches\",\n    value: function getBranches() {\n      var _this7 = this;\n\n      var result = new Map();\n      var queue = [];\n      var branches = this.refs.getAllNames().filter(function (name) {\n        return name !== \"HEAD\";\n      });\n      branches.forEach(function (branch) {\n        var commitHash = _this7.refs.getCommit(branch);\n\n        if (commitHash) {\n          queue.push(commitHash);\n        }\n\n        var _loop = function _loop() {\n          var currentHash = queue.pop();\n\n          var current = _this7.commits.find(function (_ref3) {\n            var hash = _ref3.hash;\n            return hash === currentHash;\n          });\n\n          var prevBranches = result.get(currentHash) || new Set();\n          prevBranches.add(branch);\n          result.set(currentHash, prevBranches);\n\n          if (current.parents.length > 0) {\n            queue.push(current.parents[0]);\n          }\n        };\n\n        while (queue.length > 0) {\n          _loop();\n        }\n      });\n      return result;\n    }\n    /**\n     * Add position to given commit.\n     *\n     * @param rows Graph rows\n     * @param branchesOrder Computed order of branches\n     * @param commit Commit to position\n     */\n\n  }, {\n    key: \"withPosition\",\n    value: function withPosition(rows, branchesOrder, commit) {\n      var row = rows.getRowOf(commit.hash);\n      var maxRow = rows.getMaxRow();\n      var order = branchesOrder.get(commit.branchToDisplay);\n\n      switch (this.orientation) {\n        default:\n          return commit.setPosition({\n            x: this.initCommitOffsetX + this.template.branch.spacing * order,\n            y: this.initCommitOffsetY + this.template.commit.spacing * (maxRow - row)\n          });\n\n        case orientation_1.Orientation.VerticalReverse:\n          return commit.setPosition({\n            x: this.initCommitOffsetX + this.template.branch.spacing * order,\n            y: this.initCommitOffsetY + this.template.commit.spacing * row\n          });\n\n        case orientation_1.Orientation.Horizontal:\n          return commit.setPosition({\n            x: this.initCommitOffsetX + this.template.commit.spacing * row,\n            y: this.initCommitOffsetY + this.template.branch.spacing * order\n          });\n\n        case orientation_1.Orientation.HorizontalReverse:\n          return commit.setPosition({\n            x: this.initCommitOffsetX + this.template.commit.spacing * (maxRow - row),\n            y: this.initCommitOffsetY + this.template.branch.spacing * order\n          });\n      }\n    }\n    /**\n     * Return the default color for given branch.\n     *\n     * @param branchesOrder Computed order of branches\n     * @param branchName Name of the branch\n     */\n\n  }, {\n    key: \"getBranchDefaultColor\",\n    value: function getBranchDefaultColor(branchesOrder, branchName) {\n      return branchesOrder.getColorOf(branchName);\n    }\n    /**\n     * Tell each listener something new happened.\n     * E.g. a rendering library will know it needs to re-render the graph.\n     */\n\n  }, {\n    key: \"next\",\n    value: function next() {\n      var _this8 = this;\n\n      if (this.nextTimeoutId) {\n        window.clearTimeout(this.nextTimeoutId);\n      } // Use setTimeout() with `0` to debounce call to next tick.\n\n\n      this.nextTimeoutId = window.setTimeout(function () {\n        _this8.listeners.forEach(function (listener) {\n          return listener(_this8.getRenderedData());\n        });\n      }, 0);\n    }\n  }, {\n    key: \"isHorizontal\",\n    get: function get() {\n      return this.orientation === orientation_1.Orientation.Horizontal || this.orientation === orientation_1.Orientation.HorizontalReverse;\n    }\n  }, {\n    key: \"isVertical\",\n    get: function get() {\n      return !this.isHorizontal;\n    }\n  }, {\n    key: \"isReverse\",\n    get: function get() {\n      return this.orientation === orientation_1.Orientation.HorizontalReverse || this.orientation === orientation_1.Orientation.VerticalReverse;\n    }\n  }, {\n    key: \"shouldDisplayCommitMessage\",\n    get: function get() {\n      return !this.isHorizontal && this.mode !== mode_1.Mode.Compact;\n    }\n  }]);\n\n  return GitgraphCore;\n}();\n\nexports.GitgraphCore = GitgraphCore;","map":{"version":3,"sources":["../src/gitgraph.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst branch_1 = require(\"./branch\");\nconst graph_rows_1 = require(\"./graph-rows\");\nconst mode_1 = require(\"./mode\");\nconst branches_order_1 = require(\"./branches-order\");\nconst template_1 = require(\"./template\");\nconst refs_1 = require(\"./refs\");\nconst branches_paths_1 = require(\"./branches-paths\");\nconst utils_1 = require(\"./utils\");\nconst orientation_1 = require(\"./orientation\");\nconst gitgraph_user_api_1 = require(\"./user-api/gitgraph-user-api\");\nclass GitgraphCore {\n    constructor(options = {}) {\n        this.refs = new refs_1.Refs();\n        this.tags = new refs_1.Refs();\n        this.tagStyles = {};\n        this.tagRenders = {};\n        this.commits = [];\n        this.branches = new Map();\n        this.listeners = [];\n        this.nextTimeoutId = null;\n        this.template = template_1.getTemplate(options.template);\n        // Set a default `master` branch\n        this.currentBranch = this.createBranch(\"master\");\n        // Set all options with default values\n        this.orientation = options.orientation;\n        this.reverseArrow = utils_1.booleanOptionOr(options.reverseArrow, false);\n        this.initCommitOffsetX = utils_1.numberOptionOr(options.initCommitOffsetX, 0);\n        this.initCommitOffsetY = utils_1.numberOptionOr(options.initCommitOffsetY, 0);\n        this.mode = options.mode;\n        this.author = options.author || \"Sergio Flores <saxo-guy@epic.com>\";\n        this.commitMessage =\n            options.commitMessage || \"He doesn't like George Michael! Boooo!\";\n        this.generateCommitHash =\n            typeof options.generateCommitHash === \"function\"\n                ? options.generateCommitHash\n                : () => undefined;\n        this.branchesOrderFunction =\n            typeof options.compareBranchesOrder === \"function\"\n                ? options.compareBranchesOrder\n                : undefined;\n        this.branchLabelOnEveryCommit = utils_1.booleanOptionOr(options.branchLabelOnEveryCommit, false);\n    }\n    get isHorizontal() {\n        return (this.orientation === orientation_1.Orientation.Horizontal ||\n            this.orientation === orientation_1.Orientation.HorizontalReverse);\n    }\n    get isVertical() {\n        return !this.isHorizontal;\n    }\n    get isReverse() {\n        return (this.orientation === orientation_1.Orientation.HorizontalReverse ||\n            this.orientation === orientation_1.Orientation.VerticalReverse);\n    }\n    get shouldDisplayCommitMessage() {\n        return !this.isHorizontal && this.mode !== mode_1.Mode.Compact;\n    }\n    /**\n     * Return the API to manipulate Gitgraph as a user.\n     * Rendering library should give that API to their consumer.\n     */\n    getUserApi() {\n        return new gitgraph_user_api_1.GitgraphUserApi(this, () => this.next());\n    }\n    /**\n     * Add a change listener.\n     * It will be called any time the graph have changed (commit, mergeâ€¦).\n     *\n     * @param listener A callback to be invoked on every change.\n     * @returns A function to remove this change listener.\n     */\n    subscribe(listener) {\n        this.listeners.push(listener);\n        let isSubscribed = true;\n        return () => {\n            if (!isSubscribed)\n                return;\n            isSubscribed = false;\n            const index = this.listeners.indexOf(listener);\n            this.listeners.splice(index, 1);\n        };\n    }\n    /**\n     * Return all data required for rendering.\n     * Rendering libraries will use this to implement their rendering strategy.\n     */\n    getRenderedData() {\n        const commits = this.computeRenderedCommits();\n        const branchesPaths = this.computeRenderedBranchesPaths(commits);\n        const commitMessagesX = this.computeCommitMessagesX(branchesPaths);\n        this.computeBranchesColor(commits, branchesPaths);\n        return { commits, branchesPaths, commitMessagesX };\n    }\n    createBranch(args) {\n        const defaultParentBranchName = \"HEAD\";\n        let options = {\n            gitgraph: this,\n            name: \"\",\n            parentCommitHash: this.refs.getCommit(defaultParentBranchName),\n            style: this.template.branch,\n            onGraphUpdate: () => this.next(),\n        };\n        if (typeof args === \"string\") {\n            options.name = args;\n            options.parentCommitHash = this.refs.getCommit(defaultParentBranchName);\n        }\n        else {\n            const parentBranchName = args.from\n                ? args.from.name\n                : defaultParentBranchName;\n            const parentCommitHash = this.refs.getCommit(parentBranchName) ||\n                (this.refs.hasCommit(args.from) ? args.from : undefined);\n            args.style = args.style || {};\n            options = Object.assign({}, options, args, { parentCommitHash, style: Object.assign({}, options.style, args.style, { label: Object.assign({}, options.style.label, args.style.label) }) });\n        }\n        const branch = new branch_1.Branch(options);\n        this.branches.set(branch.name, branch);\n        return branch;\n    }\n    /**\n     * Return commits with data for rendering.\n     */\n    computeRenderedCommits() {\n        const branches = this.getBranches();\n        const commitsWithBranches = this.commits.map((commit) => this.withBranches(branches, commit));\n        const rows = graph_rows_1.createGraphRows(this.mode, this.commits);\n        const branchesOrder = new branches_order_1.BranchesOrder(commitsWithBranches, this.template.colors, this.branchesOrderFunction);\n        return (commitsWithBranches\n            .map((commit) => commit.setRefs(this.refs))\n            .map((commit) => this.withPosition(rows, branchesOrder, commit))\n            // Fallback commit computed color on branch color.\n            .map((commit) => commit.withDefaultColor(this.getBranchDefaultColor(branchesOrder, commit.branchToDisplay)))\n            // Tags need commit style to be computed (with default color).\n            .map((commit) => commit.setTags(this.tags, (name) => Object.assign({}, this.tagStyles[name], this.template.tag), (name) => this.tagRenders[name])));\n    }\n    /**\n     * Return branches paths with all data required for rendering.\n     *\n     * @param commits List of commits with rendering data computed\n     */\n    computeRenderedBranchesPaths(commits) {\n        return new branches_paths_1.BranchesPathsCalculator(commits, this.branches, this.template.commit.spacing, this.isVertical, this.isReverse, () => branch_1.createDeletedBranch(this, this.template.branch, () => this.next())).execute();\n    }\n    /**\n     * Set branches colors based on branches paths.\n     *\n     * @param commits List of graph commits\n     * @param branchesPaths Branches paths to be rendered\n     */\n    computeBranchesColor(commits, branchesPaths) {\n        const branchesOrder = new branches_order_1.BranchesOrder(commits, this.template.colors, this.branchesOrderFunction);\n        Array.from(branchesPaths).forEach(([branch]) => {\n            branch.computedColor =\n                branch.style.color ||\n                    this.getBranchDefaultColor(branchesOrder, branch.name);\n        });\n    }\n    /**\n     * Return commit messages X position for rendering.\n     *\n     * @param branchesPaths Branches paths to be rendered\n     */\n    computeCommitMessagesX(branchesPaths) {\n        const numberOfColumns = Array.from(branchesPaths).length;\n        return numberOfColumns * this.template.branch.spacing;\n    }\n    /**\n     * Add `branches` property to commit.\n     *\n     * @param branches All branches mapped by commit hash\n     * @param commit Commit\n     */\n    withBranches(branches, commit) {\n        let commitBranches = Array.from((branches.get(commit.hash) || new Set()).values());\n        if (commitBranches.length === 0) {\n            // No branch => branch has been deleted.\n            commitBranches = [branch_1.DELETED_BRANCH_NAME];\n        }\n        return commit.setBranches(commitBranches);\n    }\n    /**\n     * Get all branches from current commits.\n     */\n    getBranches() {\n        const result = new Map();\n        const queue = [];\n        const branches = this.refs.getAllNames().filter((name) => name !== \"HEAD\");\n        branches.forEach((branch) => {\n            const commitHash = this.refs.getCommit(branch);\n            if (commitHash) {\n                queue.push(commitHash);\n            }\n            while (queue.length > 0) {\n                const currentHash = queue.pop();\n                const current = this.commits.find(({ hash }) => hash === currentHash);\n                const prevBranches = result.get(currentHash) || new Set();\n                prevBranches.add(branch);\n                result.set(currentHash, prevBranches);\n                if (current.parents.length > 0) {\n                    queue.push(current.parents[0]);\n                }\n            }\n        });\n        return result;\n    }\n    /**\n     * Add position to given commit.\n     *\n     * @param rows Graph rows\n     * @param branchesOrder Computed order of branches\n     * @param commit Commit to position\n     */\n    withPosition(rows, branchesOrder, commit) {\n        const row = rows.getRowOf(commit.hash);\n        const maxRow = rows.getMaxRow();\n        const order = branchesOrder.get(commit.branchToDisplay);\n        switch (this.orientation) {\n            default:\n                return commit.setPosition({\n                    x: this.initCommitOffsetX + this.template.branch.spacing * order,\n                    y: this.initCommitOffsetY +\n                        this.template.commit.spacing * (maxRow - row),\n                });\n            case orientation_1.Orientation.VerticalReverse:\n                return commit.setPosition({\n                    x: this.initCommitOffsetX + this.template.branch.spacing * order,\n                    y: this.initCommitOffsetY + this.template.commit.spacing * row,\n                });\n            case orientation_1.Orientation.Horizontal:\n                return commit.setPosition({\n                    x: this.initCommitOffsetX + this.template.commit.spacing * row,\n                    y: this.initCommitOffsetY + this.template.branch.spacing * order,\n                });\n            case orientation_1.Orientation.HorizontalReverse:\n                return commit.setPosition({\n                    x: this.initCommitOffsetX +\n                        this.template.commit.spacing * (maxRow - row),\n                    y: this.initCommitOffsetY + this.template.branch.spacing * order,\n                });\n        }\n    }\n    /**\n     * Return the default color for given branch.\n     *\n     * @param branchesOrder Computed order of branches\n     * @param branchName Name of the branch\n     */\n    getBranchDefaultColor(branchesOrder, branchName) {\n        return branchesOrder.getColorOf(branchName);\n    }\n    /**\n     * Tell each listener something new happened.\n     * E.g. a rendering library will know it needs to re-render the graph.\n     */\n    next() {\n        if (this.nextTimeoutId) {\n            window.clearTimeout(this.nextTimeoutId);\n        }\n        // Use setTimeout() with `0` to debounce call to next tick.\n        this.nextTimeoutId = window.setTimeout(() => {\n            this.listeners.forEach((listener) => listener(this.getRenderedData()));\n        }, 0);\n    }\n}\nexports.GitgraphCore = GitgraphCore;\n//# sourceMappingURL=gitgraph.js.map"]},"metadata":{},"sourceType":"script"}