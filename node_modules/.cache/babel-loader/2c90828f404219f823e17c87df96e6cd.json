{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/sgannu/projects/sgannu.github.io/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/sgannu/projects/sgannu.github.io/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar RegularGraphRows =\n/*#__PURE__*/\nfunction () {\n  function RegularGraphRows(commits) {\n    _classCallCheck(this, RegularGraphRows);\n\n    this.rows = new Map();\n    this.maxRowCache = undefined;\n    this.computeRowsFromCommits(commits);\n  }\n\n  _createClass(RegularGraphRows, [{\n    key: \"getRowOf\",\n    value: function getRowOf(commitHash) {\n      return this.rows.get(commitHash) || 0;\n    }\n  }, {\n    key: \"getMaxRow\",\n    value: function getMaxRow() {\n      if (this.maxRowCache === undefined) {\n        this.maxRowCache = uniq(Array.from(this.rows.values())).length - 1;\n      }\n\n      return this.maxRowCache;\n    }\n  }, {\n    key: \"computeRowsFromCommits\",\n    value: function computeRowsFromCommits(commits) {\n      var _this = this;\n\n      commits.forEach(function (commit, i) {\n        _this.rows.set(commit.hash, i);\n      });\n      this.maxRowCache = undefined;\n    }\n  }]);\n\n  return RegularGraphRows;\n}();\n\nexports.RegularGraphRows = RegularGraphRows;\n/**\n * Creates a duplicate-free version of an array.\n *\n * Don't use lodash's `uniq` as it increased bundlesize a lot for such a\n * simple function.\n * => The way we bundle for browser seems not to work with `lodash-es`.\n * => I didn't to get tree-shaking to work with `lodash` (the CommonJS version).\n *\n * @param array Array of values\n */\n\nfunction uniq(array) {\n  var set = new Set();\n  array.forEach(function (value) {\n    return set.add(value);\n  });\n  return Array.from(set);\n}","map":{"version":3,"sources":["../../src/graph-rows/regular.ts"],"names":[],"mappings":";;;;;;;;;;IAEa,gB;;;AAKX,4BAAmB,OAAnB,EAAgD;AAAA;;AAJtC,SAAA,IAAA,GAAO,IAAI,GAAJ,EAAP;AAEF,SAAA,WAAA,GAAkC,SAAlC;AAGN,SAAK,sBAAL,CAA4B,OAA5B;AACD;;;;6BAEe,U,EAA0B;AACxC,aAAO,KAAK,IAAL,CAAU,GAAV,CAAc,UAAd,KAA6B,CAApC;AACD;;;gCAEe;AACd,UAAI,KAAK,WAAL,KAAqB,SAAzB,EAAoC;AAClC,aAAK,WAAL,GAAmB,IAAI,CAAC,KAAK,CAAC,IAAN,CAAW,KAAK,IAAL,CAAU,MAAV,EAAX,CAAD,CAAJ,CAAqC,MAArC,GAA8C,CAAjE;AACD;;AACD,aAAO,KAAK,WAAZ;AACD;;;2CAEgC,O,EAA6B;AAAA;;AAC5D,MAAA,OAAO,CAAC,OAAR,CAAgB,UAAC,MAAD,EAAS,CAAT,EAAc;AAC5B,QAAA,KAAI,CAAC,IAAL,CAAU,GAAV,CAAc,MAAM,CAAC,IAArB,EAA2B,CAA3B;AACD,OAFD;AAGA,WAAK,WAAL,GAAmB,SAAnB;AACD;;;;;;AAzBH,OAAA,CAAA,gBAAA,GAAA,gBAAA;AA4BA;;;;;;;;;;;AAUA,SAAS,IAAT,CAAiB,KAAjB,EAA2B;AACzB,MAAM,GAAG,GAAG,IAAI,GAAJ,EAAZ;AACA,EAAA,KAAK,CAAC,OAAN,CAAc,UAAC,KAAD;AAAA,WAAW,GAAG,CAAC,GAAJ,CAAQ,KAAR,CAAX;AAAA,GAAd;AACA,SAAO,KAAK,CAAC,IAAN,CAAW,GAAX,CAAP;AACD","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass RegularGraphRows {\n    constructor(commits) {\n        this.rows = new Map();\n        this.maxRowCache = undefined;\n        this.computeRowsFromCommits(commits);\n    }\n    getRowOf(commitHash) {\n        return this.rows.get(commitHash) || 0;\n    }\n    getMaxRow() {\n        if (this.maxRowCache === undefined) {\n            this.maxRowCache = uniq(Array.from(this.rows.values())).length - 1;\n        }\n        return this.maxRowCache;\n    }\n    computeRowsFromCommits(commits) {\n        commits.forEach((commit, i) => {\n            this.rows.set(commit.hash, i);\n        });\n        this.maxRowCache = undefined;\n    }\n}\nexports.RegularGraphRows = RegularGraphRows;\n/**\n * Creates a duplicate-free version of an array.\n *\n * Don't use lodash's `uniq` as it increased bundlesize a lot for such a\n * simple function.\n * => The way we bundle for browser seems not to work with `lodash-es`.\n * => I didn't to get tree-shaking to work with `lodash` (the CommonJS version).\n *\n * @param array Array of values\n */\nfunction uniq(array) {\n    const set = new Set();\n    array.forEach((value) => set.add(value));\n    return Array.from(set);\n}\n//# sourceMappingURL=regular.js.map"]},"metadata":{},"sourceType":"script"}