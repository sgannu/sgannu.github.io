{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst branch_1 = require(\"./branch\");\n\nconst graph_rows_1 = require(\"./graph-rows\");\n\nconst mode_1 = require(\"./mode\");\n\nconst branches_order_1 = require(\"./branches-order\");\n\nconst template_1 = require(\"./template\");\n\nconst refs_1 = require(\"./refs\");\n\nconst branches_paths_1 = require(\"./branches-paths\");\n\nconst utils_1 = require(\"./utils\");\n\nconst orientation_1 = require(\"./orientation\");\n\nconst gitgraph_user_api_1 = require(\"./user-api/gitgraph-user-api\");\n\nclass GitgraphCore {\n  constructor(options = {}) {\n    this.refs = new refs_1.Refs();\n    this.tags = new refs_1.Refs();\n    this.tagStyles = {};\n    this.tagRenders = {};\n    this.commits = [];\n    this.branches = new Map();\n    this.listeners = [];\n    this.nextTimeoutId = null;\n    this.template = template_1.getTemplate(options.template); // Set a default `master` branch\n\n    this.currentBranch = this.createBranch(\"master\"); // Set all options with default values\n\n    this.orientation = options.orientation;\n    this.reverseArrow = utils_1.booleanOptionOr(options.reverseArrow, false);\n    this.initCommitOffsetX = utils_1.numberOptionOr(options.initCommitOffsetX, 0);\n    this.initCommitOffsetY = utils_1.numberOptionOr(options.initCommitOffsetY, 0);\n    this.mode = options.mode;\n    this.author = options.author || \"Sergio Flores <saxo-guy@epic.com>\";\n    this.commitMessage = options.commitMessage || \"He doesn't like George Michael! Boooo!\";\n    this.generateCommitHash = typeof options.generateCommitHash === \"function\" ? options.generateCommitHash : () => undefined;\n    this.branchesOrderFunction = typeof options.compareBranchesOrder === \"function\" ? options.compareBranchesOrder : undefined;\n    this.branchLabelOnEveryCommit = utils_1.booleanOptionOr(options.branchLabelOnEveryCommit, false);\n  }\n\n  get isHorizontal() {\n    return this.orientation === orientation_1.Orientation.Horizontal || this.orientation === orientation_1.Orientation.HorizontalReverse;\n  }\n\n  get isVertical() {\n    return !this.isHorizontal;\n  }\n\n  get isReverse() {\n    return this.orientation === orientation_1.Orientation.HorizontalReverse || this.orientation === orientation_1.Orientation.VerticalReverse;\n  }\n\n  get shouldDisplayCommitMessage() {\n    return !this.isHorizontal && this.mode !== mode_1.Mode.Compact;\n  }\n  /**\n   * Return the API to manipulate Gitgraph as a user.\n   * Rendering library should give that API to their consumer.\n   */\n\n\n  getUserApi() {\n    return new gitgraph_user_api_1.GitgraphUserApi(this, () => this.next());\n  }\n  /**\n   * Add a change listener.\n   * It will be called any time the graph have changed (commit, mergeâ€¦).\n   *\n   * @param listener A callback to be invoked on every change.\n   * @returns A function to remove this change listener.\n   */\n\n\n  subscribe(listener) {\n    this.listeners.push(listener);\n    let isSubscribed = true;\n    return () => {\n      if (!isSubscribed) return;\n      isSubscribed = false;\n      const index = this.listeners.indexOf(listener);\n      this.listeners.splice(index, 1);\n    };\n  }\n  /**\n   * Return all data required for rendering.\n   * Rendering libraries will use this to implement their rendering strategy.\n   */\n\n\n  getRenderedData() {\n    const commits = this.computeRenderedCommits();\n    const branchesPaths = this.computeRenderedBranchesPaths(commits);\n    const commitMessagesX = this.computeCommitMessagesX(branchesPaths);\n    this.computeBranchesColor(commits, branchesPaths);\n    return {\n      commits,\n      branchesPaths,\n      commitMessagesX\n    };\n  }\n\n  createBranch(args) {\n    const defaultParentBranchName = \"HEAD\";\n    let options = {\n      gitgraph: this,\n      name: \"\",\n      parentCommitHash: this.refs.getCommit(defaultParentBranchName),\n      style: this.template.branch,\n      onGraphUpdate: () => this.next()\n    };\n\n    if (typeof args === \"string\") {\n      options.name = args;\n      options.parentCommitHash = this.refs.getCommit(defaultParentBranchName);\n    } else {\n      const parentBranchName = args.from ? args.from.name : defaultParentBranchName;\n      const parentCommitHash = this.refs.getCommit(parentBranchName) || (this.refs.hasCommit(args.from) ? args.from : undefined);\n      args.style = args.style || {};\n      options = Object.assign({}, options, args, {\n        parentCommitHash,\n        style: Object.assign({}, options.style, args.style, {\n          label: Object.assign({}, options.style.label, args.style.label)\n        })\n      });\n    }\n\n    const branch = new branch_1.Branch(options);\n    this.branches.set(branch.name, branch);\n    return branch;\n  }\n  /**\n   * Return commits with data for rendering.\n   */\n\n\n  computeRenderedCommits() {\n    const branches = this.getBranches();\n    const commitsWithBranches = this.commits.map(commit => this.withBranches(branches, commit));\n    const rows = graph_rows_1.createGraphRows(this.mode, this.commits);\n    const branchesOrder = new branches_order_1.BranchesOrder(commitsWithBranches, this.template.colors, this.branchesOrderFunction);\n    return commitsWithBranches.map(commit => commit.setRefs(this.refs)).map(commit => this.withPosition(rows, branchesOrder, commit)) // Fallback commit computed color on branch color.\n    .map(commit => commit.withDefaultColor(this.getBranchDefaultColor(branchesOrder, commit.branchToDisplay))) // Tags need commit style to be computed (with default color).\n    .map(commit => commit.setTags(this.tags, name => Object.assign({}, this.tagStyles[name], this.template.tag), name => this.tagRenders[name]));\n  }\n  /**\n   * Return branches paths with all data required for rendering.\n   *\n   * @param commits List of commits with rendering data computed\n   */\n\n\n  computeRenderedBranchesPaths(commits) {\n    return new branches_paths_1.BranchesPathsCalculator(commits, this.branches, this.template.commit.spacing, this.isVertical, this.isReverse, () => branch_1.createDeletedBranch(this, this.template.branch, () => this.next())).execute();\n  }\n  /**\n   * Set branches colors based on branches paths.\n   *\n   * @param commits List of graph commits\n   * @param branchesPaths Branches paths to be rendered\n   */\n\n\n  computeBranchesColor(commits, branchesPaths) {\n    const branchesOrder = new branches_order_1.BranchesOrder(commits, this.template.colors, this.branchesOrderFunction);\n    Array.from(branchesPaths).forEach(([branch]) => {\n      branch.computedColor = branch.style.color || this.getBranchDefaultColor(branchesOrder, branch.name);\n    });\n  }\n  /**\n   * Return commit messages X position for rendering.\n   *\n   * @param branchesPaths Branches paths to be rendered\n   */\n\n\n  computeCommitMessagesX(branchesPaths) {\n    const numberOfColumns = Array.from(branchesPaths).length;\n    return numberOfColumns * this.template.branch.spacing;\n  }\n  /**\n   * Add `branches` property to commit.\n   *\n   * @param branches All branches mapped by commit hash\n   * @param commit Commit\n   */\n\n\n  withBranches(branches, commit) {\n    let commitBranches = Array.from((branches.get(commit.hash) || new Set()).values());\n\n    if (commitBranches.length === 0) {\n      // No branch => branch has been deleted.\n      commitBranches = [branch_1.DELETED_BRANCH_NAME];\n    }\n\n    return commit.setBranches(commitBranches);\n  }\n  /**\n   * Get all branches from current commits.\n   */\n\n\n  getBranches() {\n    const result = new Map();\n    const queue = [];\n    const branches = this.refs.getAllNames().filter(name => name !== \"HEAD\");\n    branches.forEach(branch => {\n      const commitHash = this.refs.getCommit(branch);\n\n      if (commitHash) {\n        queue.push(commitHash);\n      }\n\n      while (queue.length > 0) {\n        const currentHash = queue.pop();\n        const current = this.commits.find(({\n          hash\n        }) => hash === currentHash);\n        const prevBranches = result.get(currentHash) || new Set();\n        prevBranches.add(branch);\n        result.set(currentHash, prevBranches);\n\n        if (current.parents.length > 0) {\n          queue.push(current.parents[0]);\n        }\n      }\n    });\n    return result;\n  }\n  /**\n   * Add position to given commit.\n   *\n   * @param rows Graph rows\n   * @param branchesOrder Computed order of branches\n   * @param commit Commit to position\n   */\n\n\n  withPosition(rows, branchesOrder, commit) {\n    const row = rows.getRowOf(commit.hash);\n    const maxRow = rows.getMaxRow();\n    const order = branchesOrder.get(commit.branchToDisplay);\n\n    switch (this.orientation) {\n      default:\n        return commit.setPosition({\n          x: this.initCommitOffsetX + this.template.branch.spacing * order,\n          y: this.initCommitOffsetY + this.template.commit.spacing * (maxRow - row)\n        });\n\n      case orientation_1.Orientation.VerticalReverse:\n        return commit.setPosition({\n          x: this.initCommitOffsetX + this.template.branch.spacing * order,\n          y: this.initCommitOffsetY + this.template.commit.spacing * row\n        });\n\n      case orientation_1.Orientation.Horizontal:\n        return commit.setPosition({\n          x: this.initCommitOffsetX + this.template.commit.spacing * row,\n          y: this.initCommitOffsetY + this.template.branch.spacing * order\n        });\n\n      case orientation_1.Orientation.HorizontalReverse:\n        return commit.setPosition({\n          x: this.initCommitOffsetX + this.template.commit.spacing * (maxRow - row),\n          y: this.initCommitOffsetY + this.template.branch.spacing * order\n        });\n    }\n  }\n  /**\n   * Return the default color for given branch.\n   *\n   * @param branchesOrder Computed order of branches\n   * @param branchName Name of the branch\n   */\n\n\n  getBranchDefaultColor(branchesOrder, branchName) {\n    return branchesOrder.getColorOf(branchName);\n  }\n  /**\n   * Tell each listener something new happened.\n   * E.g. a rendering library will know it needs to re-render the graph.\n   */\n\n\n  next() {\n    if (this.nextTimeoutId) {\n      window.clearTimeout(this.nextTimeoutId);\n    } // Use setTimeout() with `0` to debounce call to next tick.\n\n\n    this.nextTimeoutId = window.setTimeout(() => {\n      this.listeners.forEach(listener => listener(this.getRenderedData()));\n    }, 0);\n  }\n\n}\n\nexports.GitgraphCore = GitgraphCore;","map":{"version":3,"sources":["../src/gitgraph.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst branch_1 = require(\"./branch\");\nconst graph_rows_1 = require(\"./graph-rows\");\nconst mode_1 = require(\"./mode\");\nconst branches_order_1 = require(\"./branches-order\");\nconst template_1 = require(\"./template\");\nconst refs_1 = require(\"./refs\");\nconst branches_paths_1 = require(\"./branches-paths\");\nconst utils_1 = require(\"./utils\");\nconst orientation_1 = require(\"./orientation\");\nconst gitgraph_user_api_1 = require(\"./user-api/gitgraph-user-api\");\nclass GitgraphCore {\n    constructor(options = {}) {\n        this.refs = new refs_1.Refs();\n        this.tags = new refs_1.Refs();\n        this.tagStyles = {};\n        this.tagRenders = {};\n        this.commits = [];\n        this.branches = new Map();\n        this.listeners = [];\n        this.nextTimeoutId = null;\n        this.template = template_1.getTemplate(options.template);\n        // Set a default `master` branch\n        this.currentBranch = this.createBranch(\"master\");\n        // Set all options with default values\n        this.orientation = options.orientation;\n        this.reverseArrow = utils_1.booleanOptionOr(options.reverseArrow, false);\n        this.initCommitOffsetX = utils_1.numberOptionOr(options.initCommitOffsetX, 0);\n        this.initCommitOffsetY = utils_1.numberOptionOr(options.initCommitOffsetY, 0);\n        this.mode = options.mode;\n        this.author = options.author || \"Sergio Flores <saxo-guy@epic.com>\";\n        this.commitMessage =\n            options.commitMessage || \"He doesn't like George Michael! Boooo!\";\n        this.generateCommitHash =\n            typeof options.generateCommitHash === \"function\"\n                ? options.generateCommitHash\n                : () => undefined;\n        this.branchesOrderFunction =\n            typeof options.compareBranchesOrder === \"function\"\n                ? options.compareBranchesOrder\n                : undefined;\n        this.branchLabelOnEveryCommit = utils_1.booleanOptionOr(options.branchLabelOnEveryCommit, false);\n    }\n    get isHorizontal() {\n        return (this.orientation === orientation_1.Orientation.Horizontal ||\n            this.orientation === orientation_1.Orientation.HorizontalReverse);\n    }\n    get isVertical() {\n        return !this.isHorizontal;\n    }\n    get isReverse() {\n        return (this.orientation === orientation_1.Orientation.HorizontalReverse ||\n            this.orientation === orientation_1.Orientation.VerticalReverse);\n    }\n    get shouldDisplayCommitMessage() {\n        return !this.isHorizontal && this.mode !== mode_1.Mode.Compact;\n    }\n    /**\n     * Return the API to manipulate Gitgraph as a user.\n     * Rendering library should give that API to their consumer.\n     */\n    getUserApi() {\n        return new gitgraph_user_api_1.GitgraphUserApi(this, () => this.next());\n    }\n    /**\n     * Add a change listener.\n     * It will be called any time the graph have changed (commit, mergeâ€¦).\n     *\n     * @param listener A callback to be invoked on every change.\n     * @returns A function to remove this change listener.\n     */\n    subscribe(listener) {\n        this.listeners.push(listener);\n        let isSubscribed = true;\n        return () => {\n            if (!isSubscribed)\n                return;\n            isSubscribed = false;\n            const index = this.listeners.indexOf(listener);\n            this.listeners.splice(index, 1);\n        };\n    }\n    /**\n     * Return all data required for rendering.\n     * Rendering libraries will use this to implement their rendering strategy.\n     */\n    getRenderedData() {\n        const commits = this.computeRenderedCommits();\n        const branchesPaths = this.computeRenderedBranchesPaths(commits);\n        const commitMessagesX = this.computeCommitMessagesX(branchesPaths);\n        this.computeBranchesColor(commits, branchesPaths);\n        return { commits, branchesPaths, commitMessagesX };\n    }\n    createBranch(args) {\n        const defaultParentBranchName = \"HEAD\";\n        let options = {\n            gitgraph: this,\n            name: \"\",\n            parentCommitHash: this.refs.getCommit(defaultParentBranchName),\n            style: this.template.branch,\n            onGraphUpdate: () => this.next(),\n        };\n        if (typeof args === \"string\") {\n            options.name = args;\n            options.parentCommitHash = this.refs.getCommit(defaultParentBranchName);\n        }\n        else {\n            const parentBranchName = args.from\n                ? args.from.name\n                : defaultParentBranchName;\n            const parentCommitHash = this.refs.getCommit(parentBranchName) ||\n                (this.refs.hasCommit(args.from) ? args.from : undefined);\n            args.style = args.style || {};\n            options = Object.assign({}, options, args, { parentCommitHash, style: Object.assign({}, options.style, args.style, { label: Object.assign({}, options.style.label, args.style.label) }) });\n        }\n        const branch = new branch_1.Branch(options);\n        this.branches.set(branch.name, branch);\n        return branch;\n    }\n    /**\n     * Return commits with data for rendering.\n     */\n    computeRenderedCommits() {\n        const branches = this.getBranches();\n        const commitsWithBranches = this.commits.map((commit) => this.withBranches(branches, commit));\n        const rows = graph_rows_1.createGraphRows(this.mode, this.commits);\n        const branchesOrder = new branches_order_1.BranchesOrder(commitsWithBranches, this.template.colors, this.branchesOrderFunction);\n        return (commitsWithBranches\n            .map((commit) => commit.setRefs(this.refs))\n            .map((commit) => this.withPosition(rows, branchesOrder, commit))\n            // Fallback commit computed color on branch color.\n            .map((commit) => commit.withDefaultColor(this.getBranchDefaultColor(branchesOrder, commit.branchToDisplay)))\n            // Tags need commit style to be computed (with default color).\n            .map((commit) => commit.setTags(this.tags, (name) => Object.assign({}, this.tagStyles[name], this.template.tag), (name) => this.tagRenders[name])));\n    }\n    /**\n     * Return branches paths with all data required for rendering.\n     *\n     * @param commits List of commits with rendering data computed\n     */\n    computeRenderedBranchesPaths(commits) {\n        return new branches_paths_1.BranchesPathsCalculator(commits, this.branches, this.template.commit.spacing, this.isVertical, this.isReverse, () => branch_1.createDeletedBranch(this, this.template.branch, () => this.next())).execute();\n    }\n    /**\n     * Set branches colors based on branches paths.\n     *\n     * @param commits List of graph commits\n     * @param branchesPaths Branches paths to be rendered\n     */\n    computeBranchesColor(commits, branchesPaths) {\n        const branchesOrder = new branches_order_1.BranchesOrder(commits, this.template.colors, this.branchesOrderFunction);\n        Array.from(branchesPaths).forEach(([branch]) => {\n            branch.computedColor =\n                branch.style.color ||\n                    this.getBranchDefaultColor(branchesOrder, branch.name);\n        });\n    }\n    /**\n     * Return commit messages X position for rendering.\n     *\n     * @param branchesPaths Branches paths to be rendered\n     */\n    computeCommitMessagesX(branchesPaths) {\n        const numberOfColumns = Array.from(branchesPaths).length;\n        return numberOfColumns * this.template.branch.spacing;\n    }\n    /**\n     * Add `branches` property to commit.\n     *\n     * @param branches All branches mapped by commit hash\n     * @param commit Commit\n     */\n    withBranches(branches, commit) {\n        let commitBranches = Array.from((branches.get(commit.hash) || new Set()).values());\n        if (commitBranches.length === 0) {\n            // No branch => branch has been deleted.\n            commitBranches = [branch_1.DELETED_BRANCH_NAME];\n        }\n        return commit.setBranches(commitBranches);\n    }\n    /**\n     * Get all branches from current commits.\n     */\n    getBranches() {\n        const result = new Map();\n        const queue = [];\n        const branches = this.refs.getAllNames().filter((name) => name !== \"HEAD\");\n        branches.forEach((branch) => {\n            const commitHash = this.refs.getCommit(branch);\n            if (commitHash) {\n                queue.push(commitHash);\n            }\n            while (queue.length > 0) {\n                const currentHash = queue.pop();\n                const current = this.commits.find(({ hash }) => hash === currentHash);\n                const prevBranches = result.get(currentHash) || new Set();\n                prevBranches.add(branch);\n                result.set(currentHash, prevBranches);\n                if (current.parents.length > 0) {\n                    queue.push(current.parents[0]);\n                }\n            }\n        });\n        return result;\n    }\n    /**\n     * Add position to given commit.\n     *\n     * @param rows Graph rows\n     * @param branchesOrder Computed order of branches\n     * @param commit Commit to position\n     */\n    withPosition(rows, branchesOrder, commit) {\n        const row = rows.getRowOf(commit.hash);\n        const maxRow = rows.getMaxRow();\n        const order = branchesOrder.get(commit.branchToDisplay);\n        switch (this.orientation) {\n            default:\n                return commit.setPosition({\n                    x: this.initCommitOffsetX + this.template.branch.spacing * order,\n                    y: this.initCommitOffsetY +\n                        this.template.commit.spacing * (maxRow - row),\n                });\n            case orientation_1.Orientation.VerticalReverse:\n                return commit.setPosition({\n                    x: this.initCommitOffsetX + this.template.branch.spacing * order,\n                    y: this.initCommitOffsetY + this.template.commit.spacing * row,\n                });\n            case orientation_1.Orientation.Horizontal:\n                return commit.setPosition({\n                    x: this.initCommitOffsetX + this.template.commit.spacing * row,\n                    y: this.initCommitOffsetY + this.template.branch.spacing * order,\n                });\n            case orientation_1.Orientation.HorizontalReverse:\n                return commit.setPosition({\n                    x: this.initCommitOffsetX +\n                        this.template.commit.spacing * (maxRow - row),\n                    y: this.initCommitOffsetY + this.template.branch.spacing * order,\n                });\n        }\n    }\n    /**\n     * Return the default color for given branch.\n     *\n     * @param branchesOrder Computed order of branches\n     * @param branchName Name of the branch\n     */\n    getBranchDefaultColor(branchesOrder, branchName) {\n        return branchesOrder.getColorOf(branchName);\n    }\n    /**\n     * Tell each listener something new happened.\n     * E.g. a rendering library will know it needs to re-render the graph.\n     */\n    next() {\n        if (this.nextTimeoutId) {\n            window.clearTimeout(this.nextTimeoutId);\n        }\n        // Use setTimeout() with `0` to debounce call to next tick.\n        this.nextTimeoutId = window.setTimeout(() => {\n            this.listeners.forEach((listener) => listener(this.getRenderedData()));\n        }, 0);\n    }\n}\nexports.GitgraphCore = GitgraphCore;\n//# sourceMappingURL=gitgraph.js.map"]},"metadata":{},"sourceType":"script"}