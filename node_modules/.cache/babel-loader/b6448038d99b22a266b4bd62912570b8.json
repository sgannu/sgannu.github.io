{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst utils_1 = require(\"./utils\");\n/**\n * Branch merge style enum\n */\n\n\nvar MergeStyle;\n\n(function (MergeStyle) {\n  MergeStyle[\"Bezier\"] = \"bezier\";\n  MergeStyle[\"Straight\"] = \"straight\";\n})(MergeStyle || (MergeStyle = {}));\n\nexports.MergeStyle = MergeStyle;\nexports.DEFAULT_FONT = \"normal 12pt Calibri\";\n/**\n * Gitgraph template\n *\n * Set of design rules for the rendering.\n */\n\nclass Template {\n  constructor(options) {\n    // Options\n    options.branch = options.branch || {};\n    options.branch.label = options.branch.label || {};\n    options.arrow = options.arrow || {};\n    options.commit = options.commit || {};\n    options.commit.dot = options.commit.dot || {};\n    options.commit.message = options.commit.message || {}; // One color per column\n\n    this.colors = options.colors || [\"#000000\"]; // Branch style\n\n    this.branch = {\n      color: options.branch.color,\n      lineWidth: options.branch.lineWidth || 2,\n      mergeStyle: options.branch.mergeStyle || MergeStyle.Bezier,\n      spacing: utils_1.numberOptionOr(options.branch.spacing, 20),\n      label: {\n        display: utils_1.booleanOptionOr(options.branch.label.display, true),\n        color: options.branch.label.color || options.commit.color,\n        strokeColor: options.branch.label.strokeColor || options.commit.color,\n        bgColor: options.branch.label.bgColor || \"white\",\n        font: options.branch.label.font || options.commit.message.font || exports.DEFAULT_FONT,\n        borderRadius: utils_1.numberOptionOr(options.branch.label.borderRadius, 10)\n      }\n    }; // Arrow style\n\n    this.arrow = {\n      size: options.arrow.size || null,\n      color: options.arrow.color || null,\n      offset: options.arrow.offset || 2\n    }; // Commit style\n\n    this.commit = {\n      color: options.commit.color,\n      spacing: utils_1.numberOptionOr(options.commit.spacing, 25),\n      hasTooltipInCompactMode: utils_1.booleanOptionOr(options.commit.hasTooltipInCompactMode, true),\n      dot: {\n        color: options.commit.dot.color || options.commit.color,\n        size: options.commit.dot.size || 3,\n        strokeWidth: utils_1.numberOptionOr(options.commit.dot.strokeWidth, 0),\n        strokeColor: options.commit.dot.strokeColor,\n        font: options.commit.dot.font || options.commit.message.font || \"normal 10pt Calibri\"\n      },\n      message: {\n        display: utils_1.booleanOptionOr(options.commit.message.display, true),\n        displayAuthor: utils_1.booleanOptionOr(options.commit.message.displayAuthor, true),\n        displayHash: utils_1.booleanOptionOr(options.commit.message.displayHash, true),\n        color: options.commit.message.color || options.commit.color,\n        font: options.commit.message.font || exports.DEFAULT_FONT\n      }\n    }; // Tag style\n    // This one is computed in the Tag instance. It needs Commit style\n    // that is partially computed at runtime (for colors).\n\n    this.tag = options.tag || {};\n  }\n\n}\n\nexports.Template = Template;\n/**\n * Black arrow template\n */\n\nconst blackArrowTemplate = new Template({\n  colors: [\"#6963FF\", \"#47E8D4\", \"#6BDB52\", \"#E84BA5\", \"#FFA657\"],\n  branch: {\n    color: \"#000000\",\n    lineWidth: 4,\n    spacing: 50,\n    mergeStyle: MergeStyle.Straight\n  },\n  commit: {\n    spacing: 60,\n    dot: {\n      size: 16,\n      strokeColor: \"#000000\",\n      strokeWidth: 4\n    },\n    message: {\n      color: \"black\"\n    }\n  },\n  arrow: {\n    size: 16,\n    offset: -1.5\n  }\n});\nexports.blackArrowTemplate = blackArrowTemplate;\n/**\n * Metro template\n */\n\nconst metroTemplate = new Template({\n  colors: [\"#979797\", \"#008fb5\", \"#f1c109\"],\n  branch: {\n    lineWidth: 10,\n    spacing: 50\n  },\n  commit: {\n    spacing: 80,\n    dot: {\n      size: 14\n    },\n    message: {\n      font: \"normal 14pt Arial\"\n    }\n  }\n});\nexports.metroTemplate = metroTemplate;\nvar TemplateName;\n\n(function (TemplateName) {\n  TemplateName[\"Metro\"] = \"metro\";\n  TemplateName[\"BlackArrow\"] = \"blackarrow\";\n})(TemplateName || (TemplateName = {}));\n\nexports.TemplateName = TemplateName;\n/**\n * Extend an existing template with new options.\n *\n * @param selectedTemplate Template to extend\n * @param options Template options\n */\n\nfunction templateExtend(selectedTemplate, options) {\n  const template = getTemplate(selectedTemplate);\n  if (!options.branch) options.branch = {};\n  if (!options.commit) options.commit = {}; // This is tedious, but it seems acceptable so we don't need lodash\n  // as we want to keep bundlesize small.\n\n  return {\n    colors: options.colors || template.colors,\n    arrow: Object.assign({}, template.arrow, options.arrow),\n    branch: Object.assign({}, template.branch, options.branch, {\n      label: Object.assign({}, template.branch.label, options.branch.label)\n    }),\n    commit: Object.assign({}, template.commit, options.commit, {\n      dot: Object.assign({}, template.commit.dot, options.commit.dot),\n      message: Object.assign({}, template.commit.message, options.commit.message)\n    }),\n    tag: Object.assign({}, template.tag, options.tag)\n  };\n}\n\nexports.templateExtend = templateExtend;\n/**\n * Resolve the template to use regarding given `template` value.\n *\n * @param template Selected template name, or instance.\n */\n\nfunction getTemplate(template) {\n  if (!template) return metroTemplate;\n\n  if (typeof template === \"string\") {\n    return {\n      [TemplateName.BlackArrow]: blackArrowTemplate,\n      [TemplateName.Metro]: metroTemplate\n    }[template];\n  }\n\n  return template;\n}\n\nexports.getTemplate = getTemplate;","map":{"version":3,"sources":["../src/template.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst utils_1 = require(\"./utils\");\n/**\n * Branch merge style enum\n */\nvar MergeStyle;\n(function (MergeStyle) {\n    MergeStyle[\"Bezier\"] = \"bezier\";\n    MergeStyle[\"Straight\"] = \"straight\";\n})(MergeStyle || (MergeStyle = {}));\nexports.MergeStyle = MergeStyle;\nexports.DEFAULT_FONT = \"normal 12pt Calibri\";\n/**\n * Gitgraph template\n *\n * Set of design rules for the rendering.\n */\nclass Template {\n    constructor(options) {\n        // Options\n        options.branch = options.branch || {};\n        options.branch.label = options.branch.label || {};\n        options.arrow = options.arrow || {};\n        options.commit = options.commit || {};\n        options.commit.dot = options.commit.dot || {};\n        options.commit.message = options.commit.message || {};\n        // One color per column\n        this.colors = options.colors || [\"#000000\"];\n        // Branch style\n        this.branch = {\n            color: options.branch.color,\n            lineWidth: options.branch.lineWidth || 2,\n            mergeStyle: options.branch.mergeStyle || MergeStyle.Bezier,\n            spacing: utils_1.numberOptionOr(options.branch.spacing, 20),\n            label: {\n                display: utils_1.booleanOptionOr(options.branch.label.display, true),\n                color: options.branch.label.color || options.commit.color,\n                strokeColor: options.branch.label.strokeColor || options.commit.color,\n                bgColor: options.branch.label.bgColor || \"white\",\n                font: options.branch.label.font ||\n                    options.commit.message.font ||\n                    exports.DEFAULT_FONT,\n                borderRadius: utils_1.numberOptionOr(options.branch.label.borderRadius, 10),\n            },\n        };\n        // Arrow style\n        this.arrow = {\n            size: options.arrow.size || null,\n            color: options.arrow.color || null,\n            offset: options.arrow.offset || 2,\n        };\n        // Commit style\n        this.commit = {\n            color: options.commit.color,\n            spacing: utils_1.numberOptionOr(options.commit.spacing, 25),\n            hasTooltipInCompactMode: utils_1.booleanOptionOr(options.commit.hasTooltipInCompactMode, true),\n            dot: {\n                color: options.commit.dot.color || options.commit.color,\n                size: options.commit.dot.size || 3,\n                strokeWidth: utils_1.numberOptionOr(options.commit.dot.strokeWidth, 0),\n                strokeColor: options.commit.dot.strokeColor,\n                font: options.commit.dot.font ||\n                    options.commit.message.font ||\n                    \"normal 10pt Calibri\",\n            },\n            message: {\n                display: utils_1.booleanOptionOr(options.commit.message.display, true),\n                displayAuthor: utils_1.booleanOptionOr(options.commit.message.displayAuthor, true),\n                displayHash: utils_1.booleanOptionOr(options.commit.message.displayHash, true),\n                color: options.commit.message.color || options.commit.color,\n                font: options.commit.message.font || exports.DEFAULT_FONT,\n            },\n        };\n        // Tag style\n        // This one is computed in the Tag instance. It needs Commit style\n        // that is partially computed at runtime (for colors).\n        this.tag = options.tag || {};\n    }\n}\nexports.Template = Template;\n/**\n * Black arrow template\n */\nconst blackArrowTemplate = new Template({\n    colors: [\"#6963FF\", \"#47E8D4\", \"#6BDB52\", \"#E84BA5\", \"#FFA657\"],\n    branch: {\n        color: \"#000000\",\n        lineWidth: 4,\n        spacing: 50,\n        mergeStyle: MergeStyle.Straight,\n    },\n    commit: {\n        spacing: 60,\n        dot: {\n            size: 16,\n            strokeColor: \"#000000\",\n            strokeWidth: 4,\n        },\n        message: {\n            color: \"black\",\n        },\n    },\n    arrow: {\n        size: 16,\n        offset: -1.5,\n    },\n});\nexports.blackArrowTemplate = blackArrowTemplate;\n/**\n * Metro template\n */\nconst metroTemplate = new Template({\n    colors: [\"#979797\", \"#008fb5\", \"#f1c109\"],\n    branch: {\n        lineWidth: 10,\n        spacing: 50,\n    },\n    commit: {\n        spacing: 80,\n        dot: {\n            size: 14,\n        },\n        message: {\n            font: \"normal 14pt Arial\",\n        },\n    },\n});\nexports.metroTemplate = metroTemplate;\nvar TemplateName;\n(function (TemplateName) {\n    TemplateName[\"Metro\"] = \"metro\";\n    TemplateName[\"BlackArrow\"] = \"blackarrow\";\n})(TemplateName || (TemplateName = {}));\nexports.TemplateName = TemplateName;\n/**\n * Extend an existing template with new options.\n *\n * @param selectedTemplate Template to extend\n * @param options Template options\n */\nfunction templateExtend(selectedTemplate, options) {\n    const template = getTemplate(selectedTemplate);\n    if (!options.branch)\n        options.branch = {};\n    if (!options.commit)\n        options.commit = {};\n    // This is tedious, but it seems acceptable so we don't need lodash\n    // as we want to keep bundlesize small.\n    return {\n        colors: options.colors || template.colors,\n        arrow: Object.assign({}, template.arrow, options.arrow),\n        branch: Object.assign({}, template.branch, options.branch, { label: Object.assign({}, template.branch.label, options.branch.label) }),\n        commit: Object.assign({}, template.commit, options.commit, { dot: Object.assign({}, template.commit.dot, options.commit.dot), message: Object.assign({}, template.commit.message, options.commit.message) }),\n        tag: Object.assign({}, template.tag, options.tag),\n    };\n}\nexports.templateExtend = templateExtend;\n/**\n * Resolve the template to use regarding given `template` value.\n *\n * @param template Selected template name, or instance.\n */\nfunction getTemplate(template) {\n    if (!template)\n        return metroTemplate;\n    if (typeof template === \"string\") {\n        return {\n            [TemplateName.BlackArrow]: blackArrowTemplate,\n            [TemplateName.Metro]: metroTemplate,\n        }[template];\n    }\n    return template;\n}\nexports.getTemplate = getTemplate;\n//# sourceMappingURL=template.js.map"]},"metadata":{},"sourceType":"script"}