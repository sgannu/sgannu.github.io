{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nconst orientation_1 = require(\"./orientation\");\n/**\n * Provide a default value to a boolean.\n * @param value\n * @param defaultValue\n */\n\n\nfunction booleanOptionOr(value, defaultValue) {\n  return typeof value === \"boolean\" ? value : defaultValue;\n}\n\nexports.booleanOptionOr = booleanOptionOr;\n/**\n * Provide a default value to a number.\n * @param value\n * @param defaultValue\n */\n\nfunction numberOptionOr(value, defaultValue) {\n  return typeof value === \"number\" ? value : defaultValue;\n}\n\nexports.numberOptionOr = numberOptionOr;\n/**\n * Creates an object composed of the picked object properties.\n * @param obj The source object\n * @param paths The property paths to pick\n */\n\nfunction pick(obj, paths) {\n  return Object.assign({}, paths.reduce((mem, key) => Object.assign({}, mem, {\n    [key]: obj[key]\n  }), {}));\n}\n\nexports.pick = pick;\n/**\n * Print a light version of commits into the console.\n * @param commits List of commits\n * @param paths The property paths to pick\n */\n\nfunction debug(commits, paths) {\n  // tslint:disable-next-line:no-console\n  console.log(JSON.stringify(commits.map(commit => pick(commit, paths)), null, 2));\n}\n\nexports.debug = debug;\n/**\n * Return true if is undefined.\n *\n * @param obj\n */\n\nfunction isUndefined(obj) {\n  return obj === undefined;\n}\n\nexports.isUndefined = isUndefined;\n/**\n * Return a version of the object without any undefined keys.\n *\n * @param obj\n */\n\nfunction withoutUndefinedKeys(obj = {}) {\n  return Object.keys(obj).reduce((mem, key) => isUndefined(obj[key]) ? mem : Object.assign({}, mem, {\n    [key]: obj[key]\n  }), {});\n}\n\nexports.withoutUndefinedKeys = withoutUndefinedKeys;\n/**\n * Return a string ready to use in `svg.path.d` to draw an arrow from params.\n *\n * @param graph Graph context\n * @param parent Parent commit of the target commit\n * @param commit Target commit\n */\n\nfunction arrowSvgPath(graph, parent, commit) {\n  const commitRadius = commit.style.dot.size;\n  const size = graph.template.arrow.size;\n  const h = commitRadius + graph.template.arrow.offset; // Delta between left & right (radian)\n\n  const delta = Math.PI / 7; // Alpha angle between parent & commit (radian)\n\n  const alpha = getAlpha(graph, parent, commit); // Top\n\n  const x1 = h * Math.cos(alpha);\n  const y1 = h * Math.sin(alpha); // Bottom right\n\n  const x2 = (h + size) * Math.cos(alpha - delta);\n  const y2 = (h + size) * Math.sin(alpha - delta); // Bottom center\n\n  const x3 = (h + size / 2) * Math.cos(alpha);\n  const y3 = (h + size / 2) * Math.sin(alpha); // Bottom left\n\n  const x4 = (h + size) * Math.cos(alpha + delta);\n  const y4 = (h + size) * Math.sin(alpha + delta);\n  return `M${x1},${y1} L${x2},${y2} Q${x3},${y3} ${x4},${y4} L${x4},${y4}`;\n}\n\nexports.arrowSvgPath = arrowSvgPath;\n\nfunction getAlpha(graph, parent, commit) {\n  const deltaX = parent.x - commit.x;\n  const deltaY = parent.y - commit.y;\n  const commitSpacing = graph.template.commit.spacing;\n  let alphaY;\n  let alphaX; // Angle usually start from previous commit Y position:\n  //\n  // o\n  // ↑ ↖ ︎\n  // o  |  <-- path is straight until last commit Y position\n  // ↑  o\n  // | ↗︎\n  // o\n  //\n  // So we can to default to commit spacing.\n  // For horizontal orientation => same with commit X position.\n\n  switch (graph.orientation) {\n    case orientation_1.Orientation.Horizontal:\n      alphaY = deltaY;\n      alphaX = -commitSpacing;\n      break;\n\n    case orientation_1.Orientation.HorizontalReverse:\n      alphaY = deltaY;\n      alphaX = commitSpacing;\n      break;\n\n    case orientation_1.Orientation.VerticalReverse:\n      alphaY = -commitSpacing;\n      alphaX = deltaX;\n      break;\n\n    default:\n      alphaY = commitSpacing;\n      alphaX = deltaX;\n      break;\n  } // If commit is distant from its parent, there should be no angle.\n  //\n  //    o ︎\n  //    ↑  <-- arrow is like previous commit was on same X position\n  // o  |\n  // | /\n  // o\n  //\n  // For horizontal orientation => same with commit Y position.\n\n\n  if (graph.isVertical) {\n    if (Math.abs(deltaY) > commitSpacing) alphaX = 0;\n  } else {\n    if (Math.abs(deltaX) > commitSpacing) alphaY = 0;\n  }\n\n  if (graph.reverseArrow) {\n    alphaY *= -1;\n    alphaX *= -1;\n  }\n\n  return Math.atan2(alphaY, alphaX);\n}","map":{"version":3,"sources":["../src/utils.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst orientation_1 = require(\"./orientation\");\n/**\n * Provide a default value to a boolean.\n * @param value\n * @param defaultValue\n */\nfunction booleanOptionOr(value, defaultValue) {\n    return typeof value === \"boolean\" ? value : defaultValue;\n}\nexports.booleanOptionOr = booleanOptionOr;\n/**\n * Provide a default value to a number.\n * @param value\n * @param defaultValue\n */\nfunction numberOptionOr(value, defaultValue) {\n    return typeof value === \"number\" ? value : defaultValue;\n}\nexports.numberOptionOr = numberOptionOr;\n/**\n * Creates an object composed of the picked object properties.\n * @param obj The source object\n * @param paths The property paths to pick\n */\nfunction pick(obj, paths) {\n    return Object.assign({}, paths.reduce((mem, key) => (Object.assign({}, mem, { [key]: obj[key] })), {}));\n}\nexports.pick = pick;\n/**\n * Print a light version of commits into the console.\n * @param commits List of commits\n * @param paths The property paths to pick\n */\nfunction debug(commits, paths) {\n    // tslint:disable-next-line:no-console\n    console.log(JSON.stringify(commits.map((commit) => pick(commit, paths)), null, 2));\n}\nexports.debug = debug;\n/**\n * Return true if is undefined.\n *\n * @param obj\n */\nfunction isUndefined(obj) {\n    return obj === undefined;\n}\nexports.isUndefined = isUndefined;\n/**\n * Return a version of the object without any undefined keys.\n *\n * @param obj\n */\nfunction withoutUndefinedKeys(obj = {}) {\n    return Object.keys(obj).reduce((mem, key) => isUndefined(obj[key]) ? mem : Object.assign({}, mem, { [key]: obj[key] }), {});\n}\nexports.withoutUndefinedKeys = withoutUndefinedKeys;\n/**\n * Return a string ready to use in `svg.path.d` to draw an arrow from params.\n *\n * @param graph Graph context\n * @param parent Parent commit of the target commit\n * @param commit Target commit\n */\nfunction arrowSvgPath(graph, parent, commit) {\n    const commitRadius = commit.style.dot.size;\n    const size = graph.template.arrow.size;\n    const h = commitRadius + graph.template.arrow.offset;\n    // Delta between left & right (radian)\n    const delta = Math.PI / 7;\n    // Alpha angle between parent & commit (radian)\n    const alpha = getAlpha(graph, parent, commit);\n    // Top\n    const x1 = h * Math.cos(alpha);\n    const y1 = h * Math.sin(alpha);\n    // Bottom right\n    const x2 = (h + size) * Math.cos(alpha - delta);\n    const y2 = (h + size) * Math.sin(alpha - delta);\n    // Bottom center\n    const x3 = (h + size / 2) * Math.cos(alpha);\n    const y3 = (h + size / 2) * Math.sin(alpha);\n    // Bottom left\n    const x4 = (h + size) * Math.cos(alpha + delta);\n    const y4 = (h + size) * Math.sin(alpha + delta);\n    return `M${x1},${y1} L${x2},${y2} Q${x3},${y3} ${x4},${y4} L${x4},${y4}`;\n}\nexports.arrowSvgPath = arrowSvgPath;\nfunction getAlpha(graph, parent, commit) {\n    const deltaX = parent.x - commit.x;\n    const deltaY = parent.y - commit.y;\n    const commitSpacing = graph.template.commit.spacing;\n    let alphaY;\n    let alphaX;\n    // Angle usually start from previous commit Y position:\n    //\n    // o\n    // ↑ ↖ ︎\n    // o  |  <-- path is straight until last commit Y position\n    // ↑  o\n    // | ↗︎\n    // o\n    //\n    // So we can to default to commit spacing.\n    // For horizontal orientation => same with commit X position.\n    switch (graph.orientation) {\n        case orientation_1.Orientation.Horizontal:\n            alphaY = deltaY;\n            alphaX = -commitSpacing;\n            break;\n        case orientation_1.Orientation.HorizontalReverse:\n            alphaY = deltaY;\n            alphaX = commitSpacing;\n            break;\n        case orientation_1.Orientation.VerticalReverse:\n            alphaY = -commitSpacing;\n            alphaX = deltaX;\n            break;\n        default:\n            alphaY = commitSpacing;\n            alphaX = deltaX;\n            break;\n    }\n    // If commit is distant from its parent, there should be no angle.\n    //\n    //    o ︎\n    //    ↑  <-- arrow is like previous commit was on same X position\n    // o  |\n    // | /\n    // o\n    //\n    // For horizontal orientation => same with commit Y position.\n    if (graph.isVertical) {\n        if (Math.abs(deltaY) > commitSpacing)\n            alphaX = 0;\n    }\n    else {\n        if (Math.abs(deltaX) > commitSpacing)\n            alphaY = 0;\n    }\n    if (graph.reverseArrow) {\n        alphaY *= -1;\n        alphaX *= -1;\n    }\n    return Math.atan2(alphaY, alphaX);\n}\n//# sourceMappingURL=utils.js.map"]},"metadata":{},"sourceType":"script"}