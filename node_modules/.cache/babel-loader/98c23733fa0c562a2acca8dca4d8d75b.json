{"ast":null,"code":"\"use strict\";\n\nvar _slicedToArray = require(\"/Users/sgannu/projects/sgannu.github.io/node_modules/@babel/runtime/helpers/slicedToArray\");\n\nvar _classCallCheck = require(\"/Users/sgannu/projects/sgannu.github.io/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/sgannu/projects/sgannu.github.io/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar tag_1 = require(\"./tag\");\n/**\n * Generate a random hash.\n *\n * @return hex string with 40 chars\n */\n\n\nvar getRandomHash = function getRandomHash() {\n  return (Math.random().toString(16).substring(3) + Math.random().toString(16).substring(3) + Math.random().toString(16).substring(3) + Math.random().toString(16).substring(3)).substring(0, 40);\n};\n\nvar Commit =\n/*#__PURE__*/\nfunction () {\n  function Commit(options) {\n    var _this = this;\n\n    _classCallCheck(this, Commit);\n\n    /**\n     * Ref names\n     */\n    this.refs = [];\n    /**\n     * Commit x position\n     */\n\n    this.x = 0;\n    /**\n     * Commit y position\n     */\n\n    this.y = 0; // Set author & committer\n\n    var name, email;\n\n    try {\n      var _options$author$match = options.author.match(/(.*) <(.*)>/);\n\n      var _options$author$match2 = _slicedToArray(_options$author$match, 3);\n\n      name = _options$author$match2[1];\n      email = _options$author$match2[2];\n    } catch (e) {\n      var _ref = [options.author, \"\"];\n      name = _ref[0];\n      email = _ref[1];\n    }\n\n    this.author = {\n      name: name,\n      email: email,\n      timestamp: Date.now()\n    };\n    this.committer = {\n      name: name,\n      email: email,\n      timestamp: Date.now()\n    }; // Set commit message\n\n    this.subject = options.subject;\n    this.body = options.body || \"\"; // Set commit hash\n\n    this.hash = options.hash || getRandomHash();\n    this.hashAbbrev = this.hash.substring(0, 7); // Set parent hash\n\n    this.parents = options.parents ? options.parents : [];\n    this.parentsAbbrev = this.parents.map(function (commit) {\n      return commit.substring(0, 7);\n    }); // Set style\n\n    this.style = Object.assign({}, options.style, {\n      message: Object.assign({}, options.style.message),\n      dot: Object.assign({}, options.style.dot)\n    });\n    this.dotText = options.dotText; // Set callbacks\n\n    this.onClick = function () {\n      return options.onClick ? options.onClick(_this) : undefined;\n    };\n\n    this.onMessageClick = function () {\n      return options.onMessageClick ? options.onMessageClick(_this) : undefined;\n    };\n\n    this.onMouseOver = function () {\n      return options.onMouseOver ? options.onMouseOver(_this) : undefined;\n    };\n\n    this.onMouseOut = function () {\n      return options.onMouseOut ? options.onMouseOut(_this) : undefined;\n    }; // Set custom renders\n\n\n    this.renderDot = options.renderDot;\n    this.renderMessage = options.renderMessage;\n    this.renderTooltip = options.renderTooltip;\n  }\n  /**\n   * Message\n   */\n\n\n  _createClass(Commit, [{\n    key: \"setRefs\",\n    value: function setRefs(refs) {\n      this.refs = refs.getNames(this.hash);\n      return this;\n    }\n  }, {\n    key: \"setTags\",\n    value: function setTags(tags, getTagStyle, getTagRender) {\n      var _this2 = this;\n\n      this.tags = tags.getNames(this.hash).map(function (name) {\n        return new tag_1.Tag(name, getTagStyle(name), getTagRender(name), _this2.style);\n      });\n      return this;\n    }\n  }, {\n    key: \"setBranches\",\n    value: function setBranches(branches) {\n      this.branches = branches;\n      return this;\n    }\n  }, {\n    key: \"setPosition\",\n    value: function setPosition(_ref2) {\n      var x = _ref2.x,\n          y = _ref2.y;\n      this.x = x;\n      this.y = y;\n      return this;\n    }\n  }, {\n    key: \"withDefaultColor\",\n    value: function withDefaultColor(color) {\n      var newStyle = Object.assign({}, this.style, {\n        dot: Object.assign({}, this.style.dot),\n        message: Object.assign({}, this.style.message)\n      });\n      if (!newStyle.color) newStyle.color = color;\n      if (!newStyle.dot.color) newStyle.dot.color = color;\n      if (!newStyle.message.color) newStyle.message.color = color;\n      var commit = this.cloneCommit();\n      commit.style = newStyle;\n      return commit;\n    }\n    /**\n     * Ideally, we want Commit to be a [Value Object](https://martinfowler.com/bliki/ValueObject.html).\n     * We started with a mutable class. So we'll refactor that little by little.\n     * This private function is a helper to create a new Commit from existing one.\n     */\n\n  }, {\n    key: \"cloneCommit\",\n    value: function cloneCommit() {\n      var commit = new Commit({\n        author: \"\".concat(this.author.name, \" <\").concat(this.author.email, \">\"),\n        subject: this.subject,\n        style: this.style,\n        body: this.body,\n        hash: this.hash,\n        parents: this.parents,\n        dotText: this.dotText,\n        onClick: this.onClick,\n        onMessageClick: this.onMessageClick,\n        onMouseOver: this.onMouseOver,\n        onMouseOut: this.onMouseOut,\n        renderDot: this.renderDot,\n        renderMessage: this.renderMessage,\n        renderTooltip: this.renderTooltip\n      });\n      commit.refs = this.refs;\n      commit.branches = this.branches;\n      commit.tags = this.tags;\n      commit.x = this.x;\n      commit.y = this.y;\n      return commit;\n    }\n  }, {\n    key: \"message\",\n    get: function get() {\n      var message = \"\";\n\n      if (this.style.message.displayHash) {\n        message += \"\".concat(this.hashAbbrev, \" \");\n      }\n\n      message += this.subject;\n\n      if (this.style.message.displayAuthor) {\n        message += \" - \".concat(this.author.name, \" <\").concat(this.author.email, \">\");\n      }\n\n      return message;\n    }\n    /**\n     * Branch that should be rendered\n     */\n\n  }, {\n    key: \"branchToDisplay\",\n    get: function get() {\n      return this.branches ? this.branches[0] : \"\";\n    }\n  }]);\n\n  return Commit;\n}();\n\nexports.Commit = Commit;","map":{"version":3,"sources":["../src/commit.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst tag_1 = require(\"./tag\");\n/**\n * Generate a random hash.\n *\n * @return hex string with 40 chars\n */\nconst getRandomHash = () => (Math.random()\n    .toString(16)\n    .substring(3) +\n    Math.random()\n        .toString(16)\n        .substring(3) +\n    Math.random()\n        .toString(16)\n        .substring(3) +\n    Math.random()\n        .toString(16)\n        .substring(3)).substring(0, 40);\nclass Commit {\n    constructor(options) {\n        /**\n         * Ref names\n         */\n        this.refs = [];\n        /**\n         * Commit x position\n         */\n        this.x = 0;\n        /**\n         * Commit y position\n         */\n        this.y = 0;\n        // Set author & committer\n        let name, email;\n        try {\n            [, name, email] = options.author.match(/(.*) <(.*)>/);\n        }\n        catch (e) {\n            [name, email] = [options.author, \"\"];\n        }\n        this.author = { name, email, timestamp: Date.now() };\n        this.committer = { name, email, timestamp: Date.now() };\n        // Set commit message\n        this.subject = options.subject;\n        this.body = options.body || \"\";\n        // Set commit hash\n        this.hash = options.hash || getRandomHash();\n        this.hashAbbrev = this.hash.substring(0, 7);\n        // Set parent hash\n        this.parents = options.parents ? options.parents : [];\n        this.parentsAbbrev = this.parents.map((commit) => commit.substring(0, 7));\n        // Set style\n        this.style = Object.assign({}, options.style, { message: Object.assign({}, options.style.message), dot: Object.assign({}, options.style.dot) });\n        this.dotText = options.dotText;\n        // Set callbacks\n        this.onClick = () => (options.onClick ? options.onClick(this) : undefined);\n        this.onMessageClick = () => options.onMessageClick ? options.onMessageClick(this) : undefined;\n        this.onMouseOver = () => options.onMouseOver ? options.onMouseOver(this) : undefined;\n        this.onMouseOut = () => options.onMouseOut ? options.onMouseOut(this) : undefined;\n        // Set custom renders\n        this.renderDot = options.renderDot;\n        this.renderMessage = options.renderMessage;\n        this.renderTooltip = options.renderTooltip;\n    }\n    /**\n     * Message\n     */\n    get message() {\n        let message = \"\";\n        if (this.style.message.displayHash) {\n            message += `${this.hashAbbrev} `;\n        }\n        message += this.subject;\n        if (this.style.message.displayAuthor) {\n            message += ` - ${this.author.name} <${this.author.email}>`;\n        }\n        return message;\n    }\n    /**\n     * Branch that should be rendered\n     */\n    get branchToDisplay() {\n        return this.branches ? this.branches[0] : \"\";\n    }\n    setRefs(refs) {\n        this.refs = refs.getNames(this.hash);\n        return this;\n    }\n    setTags(tags, getTagStyle, getTagRender) {\n        this.tags = tags\n            .getNames(this.hash)\n            .map((name) => new tag_1.Tag(name, getTagStyle(name), getTagRender(name), this.style));\n        return this;\n    }\n    setBranches(branches) {\n        this.branches = branches;\n        return this;\n    }\n    setPosition({ x, y }) {\n        this.x = x;\n        this.y = y;\n        return this;\n    }\n    withDefaultColor(color) {\n        const newStyle = Object.assign({}, this.style, { dot: Object.assign({}, this.style.dot), message: Object.assign({}, this.style.message) });\n        if (!newStyle.color)\n            newStyle.color = color;\n        if (!newStyle.dot.color)\n            newStyle.dot.color = color;\n        if (!newStyle.message.color)\n            newStyle.message.color = color;\n        const commit = this.cloneCommit();\n        commit.style = newStyle;\n        return commit;\n    }\n    /**\n     * Ideally, we want Commit to be a [Value Object](https://martinfowler.com/bliki/ValueObject.html).\n     * We started with a mutable class. So we'll refactor that little by little.\n     * This private function is a helper to create a new Commit from existing one.\n     */\n    cloneCommit() {\n        const commit = new Commit({\n            author: `${this.author.name} <${this.author.email}>`,\n            subject: this.subject,\n            style: this.style,\n            body: this.body,\n            hash: this.hash,\n            parents: this.parents,\n            dotText: this.dotText,\n            onClick: this.onClick,\n            onMessageClick: this.onMessageClick,\n            onMouseOver: this.onMouseOver,\n            onMouseOut: this.onMouseOut,\n            renderDot: this.renderDot,\n            renderMessage: this.renderMessage,\n            renderTooltip: this.renderTooltip,\n        });\n        commit.refs = this.refs;\n        commit.branches = this.branches;\n        commit.tags = this.tags;\n        commit.x = this.x;\n        commit.y = this.y;\n        return commit;\n    }\n}\nexports.Commit = Commit;\n//# sourceMappingURL=commit.js.map"]},"metadata":{},"sourceType":"script"}