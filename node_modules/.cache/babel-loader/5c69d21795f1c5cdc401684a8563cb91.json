{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/sgannu/projects/sgannu.github.io/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/sgannu/projects/sgannu.github.io/node_modules/@babel/runtime/helpers/createClass\");\n\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar commit_1 = require(\"../commit\");\n\nvar utils_1 = require(\"../utils\");\n\nvar BranchUserApi =\n/*#__PURE__*/\nfunction () {\n  // tslint:enable:variable-name\n  function BranchUserApi(branch, graph, onGraphUpdate) {\n    _classCallCheck(this, BranchUserApi);\n\n    this._branch = branch;\n    this.name = branch.name;\n    this._graph = graph;\n    this._onGraphUpdate = onGraphUpdate;\n  }\n\n  _createClass(BranchUserApi, [{\n    key: \"branch\",\n    value: function branch(args) {\n      var options = typeof args === \"string\" ? {\n        name: args\n      } : args;\n      options.from = this;\n      return this._graph.createBranch(options).getUserApi();\n    }\n  }, {\n    key: \"commit\",\n    value: function commit(options) {\n      // Deal with shorter syntax\n      if (typeof options === \"string\") options = {\n        subject: options\n      };\n      if (!options) options = {};\n\n      this._commitWithParents(options, []);\n\n      this._onGraphUpdate();\n\n      return this;\n    }\n  }, {\n    key: \"merge\",\n    value: function merge() {\n      var options = arguments.length <= 0 ? undefined : arguments[0];\n\n      if (!isBranchMergeOptions(options)) {\n        options = {\n          branch: arguments.length <= 0 ? undefined : arguments[0],\n          fastForward: false,\n          commitOptions: {\n            subject: arguments.length <= 1 ? undefined : arguments[1]\n          }\n        };\n      }\n\n      var _options = options,\n          branch = _options.branch,\n          fastForward = _options.fastForward,\n          commitOptions = _options.commitOptions;\n      var branchName = typeof branch === \"string\" ? branch : branch.name;\n\n      var branchLastCommitHash = this._graph.refs.getCommit(branchName);\n\n      if (!branchLastCommitHash) {\n        throw new Error(\"The branch called \\\"\".concat(branchName, \"\\\" is unknown\"));\n      }\n\n      var canFastForward = false;\n\n      if (fastForward) {\n        var lastCommitHash = this._graph.refs.getCommit(this._branch.name);\n\n        if (lastCommitHash) {\n          canFastForward = this._areCommitsConnected(lastCommitHash, branchLastCommitHash);\n        }\n      }\n\n      if (fastForward && canFastForward) {\n        this._fastForwardTo(branchLastCommitHash);\n      } else {\n        this._commitWithParents(Object.assign({}, commitOptions, {\n          subject: commitOptions && commitOptions.subject || \"Merge branch \".concat(branchName)\n        }), [branchLastCommitHash]);\n      }\n\n      this._onGraphUpdate();\n\n      return this;\n    }\n  }, {\n    key: \"tag\",\n    value: function tag(options) {\n      if (typeof options === \"string\") {\n        this._graph.getUserApi().tag({\n          name: options,\n          ref: this._branch.name\n        });\n      } else {\n        this._graph.getUserApi().tag(Object.assign({}, options, {\n          ref: this._branch.name\n        }));\n      }\n\n      return this;\n    }\n    /**\n     * Checkout onto this branch.\n     */\n\n  }, {\n    key: \"checkout\",\n    value: function checkout() {\n      this._graph.currentBranch = this._branch;\n      return this;\n    } // tslint:disable:variable-name - Prefix `_` = explicitly private for JS users\n\n  }, {\n    key: \"_commitWithParents\",\n    value: function _commitWithParents(options, parents) {\n      var _this = this;\n\n      var parentOnSameBranch = this._graph.refs.getCommit(this._branch.name);\n\n      if (parentOnSameBranch) {\n        parents.unshift(parentOnSameBranch);\n      } else if (this._branch.parentCommitHash) {\n        parents.unshift(this._branch.parentCommitHash);\n      }\n\n      var tag = options.tag,\n          commitOptions = __rest(options, [\"tag\"]);\n\n      var commit = new commit_1.Commit(Object.assign({\n        hash: this._graph.generateCommitHash(),\n        author: this._branch.commitDefaultOptions.author || this._graph.author,\n        subject: this._branch.commitDefaultOptions.subject || this._graph.commitMessage\n      }, commitOptions, {\n        parents: parents,\n        style: this._getCommitStyle(options.style)\n      }));\n\n      if (parentOnSameBranch) {\n        // Take all the refs from the parent\n        var parentRefs = this._graph.refs.getNames(parentOnSameBranch);\n\n        parentRefs.forEach(function (ref) {\n          return _this._graph.refs.set(ref, commit.hash);\n        });\n      } else {\n        // Set the branch ref\n        this._graph.refs.set(this._branch.name, commit.hash);\n      } // Add the new commit\n\n\n      this._graph.commits.push(commit); // Move HEAD on the last commit\n\n\n      this.checkout();\n\n      this._graph.refs.set(\"HEAD\", commit.hash); // Add a tag to the commit if `option.tag` is provide\n\n\n      if (tag) this.tag(tag);\n    }\n  }, {\n    key: \"_areCommitsConnected\",\n    value: function _areCommitsConnected(parentCommitHash, childCommitHash) {\n      var _this2 = this;\n\n      var childCommit = this._graph.commits.find(function (_ref) {\n        var hash = _ref.hash;\n        return childCommitHash === hash;\n      });\n\n      if (!childCommit) return false;\n      var isFirstCommitOfGraph = childCommit.parents.length === 0;\n      if (isFirstCommitOfGraph) return false;\n\n      if (childCommit.parents.includes(parentCommitHash)) {\n        return true;\n      } // `childCommitHash` is not a direct child of `parentCommitHash`.\n      // But maybe one of `childCommitHash` parent is.\n\n\n      return childCommit.parents.some(function (directParentHash) {\n        return _this2._areCommitsConnected(parentCommitHash, directParentHash);\n      });\n    }\n  }, {\n    key: \"_fastForwardTo\",\n    value: function _fastForwardTo(commitHash) {\n      this._graph.refs.set(this._branch.name, commitHash);\n    }\n  }, {\n    key: \"_getCommitStyle\",\n    value: function _getCommitStyle() {\n      var style = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n      return Object.assign({}, utils_1.withoutUndefinedKeys(this._graph.template.commit), utils_1.withoutUndefinedKeys(this._branch.commitDefaultOptions.style), style, {\n        message: Object.assign({}, utils_1.withoutUndefinedKeys(this._graph.template.commit.message), utils_1.withoutUndefinedKeys(this._branch.commitDefaultOptions.style.message), style.message, utils_1.withoutUndefinedKeys({\n          display: this._graph.shouldDisplayCommitMessage && undefined\n        })),\n        dot: Object.assign({}, utils_1.withoutUndefinedKeys(this._graph.template.commit.dot), utils_1.withoutUndefinedKeys(this._branch.commitDefaultOptions.style.dot), style.dot)\n      });\n    }\n  }]);\n\n  return BranchUserApi;\n}();\n\nexports.BranchUserApi = BranchUserApi;\n\nfunction isBranchMergeOptions(options) {\n  return typeof options === \"object\" && !(options instanceof BranchUserApi);\n}","map":{"version":3,"sources":["../../src/user-api/branch-user-api.ts"],"names":[],"mappings":"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","sourceRoot":"","sourcesContent":["\"use strict\";\nvar __rest = (this && this.__rest) || function (s, e) {\n    var t = {};\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\n        t[p] = s[p];\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\n            t[p[i]] = s[p[i]];\n    return t;\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst commit_1 = require(\"../commit\");\nconst utils_1 = require(\"../utils\");\nclass BranchUserApi {\n    // tslint:enable:variable-name\n    constructor(branch, graph, onGraphUpdate) {\n        this._branch = branch;\n        this.name = branch.name;\n        this._graph = graph;\n        this._onGraphUpdate = onGraphUpdate;\n    }\n    branch(args) {\n        const options = typeof args === \"string\" ? { name: args } : args;\n        options.from = this;\n        return this._graph.createBranch(options).getUserApi();\n    }\n    commit(options) {\n        // Deal with shorter syntax\n        if (typeof options === \"string\")\n            options = { subject: options };\n        if (!options)\n            options = {};\n        this._commitWithParents(options, []);\n        this._onGraphUpdate();\n        return this;\n    }\n    merge(...args) {\n        let options = args[0];\n        if (!isBranchMergeOptions(options)) {\n            options = {\n                branch: args[0],\n                fastForward: false,\n                commitOptions: { subject: args[1] },\n            };\n        }\n        const { branch, fastForward, commitOptions, } = options;\n        const branchName = typeof branch === \"string\" ? branch : branch.name;\n        const branchLastCommitHash = this._graph.refs.getCommit(branchName);\n        if (!branchLastCommitHash) {\n            throw new Error(`The branch called \"${branchName}\" is unknown`);\n        }\n        let canFastForward = false;\n        if (fastForward) {\n            const lastCommitHash = this._graph.refs.getCommit(this._branch.name);\n            if (lastCommitHash) {\n                canFastForward = this._areCommitsConnected(lastCommitHash, branchLastCommitHash);\n            }\n        }\n        if (fastForward && canFastForward) {\n            this._fastForwardTo(branchLastCommitHash);\n        }\n        else {\n            this._commitWithParents(Object.assign({}, commitOptions, { subject: (commitOptions && commitOptions.subject) ||\n                    `Merge branch ${branchName}` }), [branchLastCommitHash]);\n        }\n        this._onGraphUpdate();\n        return this;\n    }\n    tag(options) {\n        if (typeof options === \"string\") {\n            this._graph.getUserApi().tag({ name: options, ref: this._branch.name });\n        }\n        else {\n            this._graph.getUserApi().tag(Object.assign({}, options, { ref: this._branch.name }));\n        }\n        return this;\n    }\n    /**\n     * Checkout onto this branch.\n     */\n    checkout() {\n        this._graph.currentBranch = this._branch;\n        return this;\n    }\n    // tslint:disable:variable-name - Prefix `_` = explicitly private for JS users\n    _commitWithParents(options, parents) {\n        const parentOnSameBranch = this._graph.refs.getCommit(this._branch.name);\n        if (parentOnSameBranch) {\n            parents.unshift(parentOnSameBranch);\n        }\n        else if (this._branch.parentCommitHash) {\n            parents.unshift(this._branch.parentCommitHash);\n        }\n        const { tag } = options, commitOptions = __rest(options, [\"tag\"]);\n        const commit = new commit_1.Commit(Object.assign({ hash: this._graph.generateCommitHash(), author: this._branch.commitDefaultOptions.author || this._graph.author, subject: this._branch.commitDefaultOptions.subject ||\n                this._graph.commitMessage }, commitOptions, { parents, style: this._getCommitStyle(options.style) }));\n        if (parentOnSameBranch) {\n            // Take all the refs from the parent\n            const parentRefs = this._graph.refs.getNames(parentOnSameBranch);\n            parentRefs.forEach((ref) => this._graph.refs.set(ref, commit.hash));\n        }\n        else {\n            // Set the branch ref\n            this._graph.refs.set(this._branch.name, commit.hash);\n        }\n        // Add the new commit\n        this._graph.commits.push(commit);\n        // Move HEAD on the last commit\n        this.checkout();\n        this._graph.refs.set(\"HEAD\", commit.hash);\n        // Add a tag to the commit if `option.tag` is provide\n        if (tag)\n            this.tag(tag);\n    }\n    _areCommitsConnected(parentCommitHash, childCommitHash) {\n        const childCommit = this._graph.commits.find(({ hash }) => childCommitHash === hash);\n        if (!childCommit)\n            return false;\n        const isFirstCommitOfGraph = childCommit.parents.length === 0;\n        if (isFirstCommitOfGraph)\n            return false;\n        if (childCommit.parents.includes(parentCommitHash)) {\n            return true;\n        }\n        // `childCommitHash` is not a direct child of `parentCommitHash`.\n        // But maybe one of `childCommitHash` parent is.\n        return childCommit.parents.some((directParentHash) => this._areCommitsConnected(parentCommitHash, directParentHash));\n    }\n    _fastForwardTo(commitHash) {\n        this._graph.refs.set(this._branch.name, commitHash);\n    }\n    _getCommitStyle(style = {}) {\n        return Object.assign({}, utils_1.withoutUndefinedKeys(this._graph.template.commit), utils_1.withoutUndefinedKeys(this._branch.commitDefaultOptions.style), style, { message: Object.assign({}, utils_1.withoutUndefinedKeys(this._graph.template.commit.message), utils_1.withoutUndefinedKeys(this._branch.commitDefaultOptions.style.message), style.message, utils_1.withoutUndefinedKeys({\n                display: this._graph.shouldDisplayCommitMessage && undefined,\n            })), dot: Object.assign({}, utils_1.withoutUndefinedKeys(this._graph.template.commit.dot), utils_1.withoutUndefinedKeys(this._branch.commitDefaultOptions.style.dot), style.dot) });\n    }\n}\nexports.BranchUserApi = BranchUserApi;\nfunction isBranchMergeOptions(options) {\n    return typeof options === \"object\" && !(options instanceof BranchUserApi);\n}\n//# sourceMappingURL=branch-user-api.js.map"]},"metadata":{},"sourceType":"script"}