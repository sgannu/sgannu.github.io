{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nclass BranchesOrder {\n  constructor(commits, colors, compareFunction) {\n    this.branches = new Set();\n    this.colors = colors;\n    commits.forEach(commit => this.branches.add(commit.branchToDisplay));\n\n    if (compareFunction) {\n      this.branches = new Set(Array.from(this.branches).sort(compareFunction));\n    }\n  }\n  /**\n   * Return the order of the given branch name.\n   *\n   * @param branchName Name of the branch\n   */\n\n\n  get(branchName) {\n    return Array.from(this.branches).findIndex(branch => branch === branchName);\n  }\n  /**\n   * Return the color of the given branch.\n   *\n   * @param branchName Name of the branch\n   */\n\n\n  getColorOf(branchName) {\n    return this.colors[this.get(branchName) % this.colors.length];\n  }\n\n}\n\nexports.BranchesOrder = BranchesOrder;","map":{"version":3,"sources":["../src/branches-order.ts"],"names":[],"mappings":";;;;;;AAoBA,MAAM,aAAN,CAAmB;AAIjB,EAAA,WAAA,CACE,OADF,EAEE,MAFF,EAGE,eAHF,EAGmD;AAN3C,SAAA,QAAA,GAAgC,IAAI,GAAJ,EAAhC;AAQN,SAAK,MAAL,GAAc,MAAd;AACA,IAAA,OAAO,CAAC,OAAR,CAAiB,MAAD,IAAY,KAAK,QAAL,CAAc,GAAd,CAAkB,MAAM,CAAC,eAAzB,CAA5B;;AAEA,QAAI,eAAJ,EAAqB;AACnB,WAAK,QAAL,GAAgB,IAAI,GAAJ,CAAQ,KAAK,CAAC,IAAN,CAAW,KAAK,QAAhB,EAA0B,IAA1B,CAA+B,eAA/B,CAAR,CAAhB;AACD;AACF;AAED;;;;;;;AAKO,EAAA,GAAG,CAAC,UAAD,EAA2B;AACnC,WAAO,KAAK,CAAC,IAAN,CAAW,KAAK,QAAhB,EAA0B,SAA1B,CACJ,MAAD,IAAY,MAAM,KAAK,UADlB,CAAP;AAGD;AAED;;;;;;;AAKO,EAAA,UAAU,CAAC,UAAD,EAA2B;AAC1C,WAAO,KAAK,MAAL,CAAY,KAAK,GAAL,CAAS,UAAT,IAAuB,KAAK,MAAL,CAAY,MAA/C,CAAP;AACD;;AAnCgB;;AAjBV,OAAA,CAAA,aAAA,GAAA,aAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass BranchesOrder {\n    constructor(commits, colors, compareFunction) {\n        this.branches = new Set();\n        this.colors = colors;\n        commits.forEach((commit) => this.branches.add(commit.branchToDisplay));\n        if (compareFunction) {\n            this.branches = new Set(Array.from(this.branches).sort(compareFunction));\n        }\n    }\n    /**\n     * Return the order of the given branch name.\n     *\n     * @param branchName Name of the branch\n     */\n    get(branchName) {\n        return Array.from(this.branches).findIndex((branch) => branch === branchName);\n    }\n    /**\n     * Return the color of the given branch.\n     *\n     * @param branchName Name of the branch\n     */\n    getColorOf(branchName) {\n        return this.colors[this.get(branchName) % this.colors.length];\n    }\n}\nexports.BranchesOrder = BranchesOrder;\n//# sourceMappingURL=branches-order.js.map"]},"metadata":{},"sourceType":"script"}