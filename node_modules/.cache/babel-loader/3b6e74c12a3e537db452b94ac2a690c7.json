{"ast":null,"code":"\"use strict\";\n\nvar _toConsumableArray = require(\"/Users/sgannu/projects/sgannu.github.io/node_modules/@babel/runtime/helpers/toConsumableArray\");\n\nvar _classCallCheck = require(\"/Users/sgannu/projects/sgannu.github.io/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/sgannu/projects/sgannu.github.io/node_modules/@babel/runtime/helpers/createClass\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar Refs =\n/*#__PURE__*/\nfunction () {\n  function Refs() {\n    _classCallCheck(this, Refs);\n\n    this.commitPerName = new Map();\n    this.namesPerCommit = new Map();\n  }\n  /**\n   * Set a new reference to a commit hash.\n   *\n   * @param name Name of the ref (ex: \"master\", \"v1.0\")\n   * @param commitHash Commit hash\n   */\n\n\n  _createClass(Refs, [{\n    key: \"set\",\n    value: function set(name, commitHash) {\n      var prevCommitHash = this.commitPerName.get(name);\n\n      if (prevCommitHash) {\n        this.removeNameFrom(prevCommitHash, name);\n      }\n\n      this.addNameTo(commitHash, name);\n      this.addCommitTo(name, commitHash);\n      return this;\n    }\n    /**\n     * Get the commit hash associated with the given reference name.\n     *\n     * @param name Name of the ref\n     */\n\n  }, {\n    key: \"getCommit\",\n    value: function getCommit(name) {\n      return this.commitPerName.get(name);\n    }\n    /**\n     * Get the list of reference names associated with given commit hash.\n     *\n     * @param commitHash Commit hash\n     */\n\n  }, {\n    key: \"getNames\",\n    value: function getNames(commitHash) {\n      return this.namesPerCommit.get(commitHash) || [];\n    }\n    /**\n     * Get all reference names known.\n     */\n\n  }, {\n    key: \"getAllNames\",\n    value: function getAllNames() {\n      return Array.from(this.commitPerName.keys());\n    }\n    /**\n     * Returns true if given commit hash is referenced.\n     *\n     * @param commitHash Commit hash\n     */\n\n  }, {\n    key: \"hasCommit\",\n    value: function hasCommit(commitHash) {\n      return this.namesPerCommit.has(commitHash);\n    }\n    /**\n     * Returns true if given reference name exists.\n     *\n     * @param name Name of the ref\n     */\n\n  }, {\n    key: \"hasName\",\n    value: function hasName(name) {\n      return this.commitPerName.has(name);\n    }\n  }, {\n    key: \"removeNameFrom\",\n    value: function removeNameFrom(commitHash, nameToRemove) {\n      var names = this.namesPerCommit.get(commitHash) || [];\n      this.namesPerCommit.set(commitHash, names.filter(function (name) {\n        return name !== nameToRemove;\n      }));\n    }\n  }, {\n    key: \"addNameTo\",\n    value: function addNameTo(commitHash, nameToAdd) {\n      var prevNames = this.namesPerCommit.get(commitHash) || [];\n      this.namesPerCommit.set(commitHash, [].concat(_toConsumableArray(prevNames), [nameToAdd]));\n    }\n  }, {\n    key: \"addCommitTo\",\n    value: function addCommitTo(name, commitHashToAdd) {\n      this.commitPerName.set(name, commitHashToAdd);\n    }\n  }]);\n\n  return Refs;\n}();\n\nexports.Refs = Refs;","map":{"version":3,"sources":["../src/refs.ts"],"names":[],"mappings":";;;;;;;;;;;;IAMM,I;;;AAAN,kBAAA;AAAA;;AACU,SAAA,aAAA,GAAgB,IAAI,GAAJ,EAAhB;AACA,SAAA,cAAA,GAAiB,IAAI,GAAJ,EAAjB;AAgFT;AA9EC;;;;;;;;;;wBAMW,I,EAAY,U,EAA0B;AAC/C,UAAM,cAAc,GAAG,KAAK,aAAL,CAAmB,GAAnB,CAAuB,IAAvB,CAAvB;;AACA,UAAI,cAAJ,EAAoB;AAClB,aAAK,cAAL,CAAoB,cAApB,EAAoC,IAApC;AACD;;AAED,WAAK,SAAL,CAAe,UAAf,EAA2B,IAA3B;AACA,WAAK,WAAL,CAAiB,IAAjB,EAAuB,UAAvB;AAEA,aAAO,IAAP;AACD;AAED;;;;;;;;8BAKiB,I,EAAU;AACzB,aAAO,KAAK,aAAL,CAAmB,GAAnB,CAAuB,IAAvB,CAAP;AACD;AAED;;;;;;;;6BAKgB,U,EAA0B;AACxC,aAAO,KAAK,cAAL,CAAoB,GAApB,CAAwB,UAAxB,KAAuC,EAA9C;AACD;AAED;;;;;;kCAGkB;AAChB,aAAO,KAAK,CAAC,IAAN,CAAW,KAAK,aAAL,CAAmB,IAAnB,EAAX,CAAP;AACD;AAED;;;;;;;;8BAKiB,U,EAA0B;AACzC,aAAO,KAAK,cAAL,CAAoB,GAApB,CAAwB,UAAxB,CAAP;AACD;AAED;;;;;;;;4BAKe,I,EAAU;AACvB,aAAO,KAAK,aAAL,CAAmB,GAAnB,CAAuB,IAAvB,CAAP;AACD;;;mCAEsB,U,EAA4B,Y,EAAkB;AACnE,UAAM,KAAK,GAAG,KAAK,cAAL,CAAoB,GAApB,CAAwB,UAAxB,KAAuC,EAArD;AAEA,WAAK,cAAL,CAAoB,GAApB,CACE,UADF,EAEE,KAAK,CAAC,MAAN,CAAa,UAAC,IAAD;AAAA,eAAU,IAAI,KAAK,YAAnB;AAAA,OAAb,CAFF;AAID;;;8BAEiB,U,EAA4B,S,EAAe;AAC3D,UAAM,SAAS,GAAG,KAAK,cAAL,CAAoB,GAApB,CAAwB,UAAxB,KAAuC,EAAzD;AACA,WAAK,cAAL,CAAoB,GAApB,CAAwB,UAAxB,+BAAwC,SAAxC,IAAmD,SAAnD;AACD;;;gCAEmB,I,EAAY,e,EAA+B;AAC7D,WAAK,aAAL,CAAmB,GAAnB,CAAuB,IAAvB,EAA6B,eAA7B;AACD;;;;;;AArFM,OAAA,CAAA,IAAA,GAAA,IAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass Refs {\n    constructor() {\n        this.commitPerName = new Map();\n        this.namesPerCommit = new Map();\n    }\n    /**\n     * Set a new reference to a commit hash.\n     *\n     * @param name Name of the ref (ex: \"master\", \"v1.0\")\n     * @param commitHash Commit hash\n     */\n    set(name, commitHash) {\n        const prevCommitHash = this.commitPerName.get(name);\n        if (prevCommitHash) {\n            this.removeNameFrom(prevCommitHash, name);\n        }\n        this.addNameTo(commitHash, name);\n        this.addCommitTo(name, commitHash);\n        return this;\n    }\n    /**\n     * Get the commit hash associated with the given reference name.\n     *\n     * @param name Name of the ref\n     */\n    getCommit(name) {\n        return this.commitPerName.get(name);\n    }\n    /**\n     * Get the list of reference names associated with given commit hash.\n     *\n     * @param commitHash Commit hash\n     */\n    getNames(commitHash) {\n        return this.namesPerCommit.get(commitHash) || [];\n    }\n    /**\n     * Get all reference names known.\n     */\n    getAllNames() {\n        return Array.from(this.commitPerName.keys());\n    }\n    /**\n     * Returns true if given commit hash is referenced.\n     *\n     * @param commitHash Commit hash\n     */\n    hasCommit(commitHash) {\n        return this.namesPerCommit.has(commitHash);\n    }\n    /**\n     * Returns true if given reference name exists.\n     *\n     * @param name Name of the ref\n     */\n    hasName(name) {\n        return this.commitPerName.has(name);\n    }\n    removeNameFrom(commitHash, nameToRemove) {\n        const names = this.namesPerCommit.get(commitHash) || [];\n        this.namesPerCommit.set(commitHash, names.filter((name) => name !== nameToRemove));\n    }\n    addNameTo(commitHash, nameToAdd) {\n        const prevNames = this.namesPerCommit.get(commitHash) || [];\n        this.namesPerCommit.set(commitHash, [...prevNames, nameToAdd]);\n    }\n    addCommitTo(name, commitHashToAdd) {\n        this.commitPerName.set(name, commitHashToAdd);\n    }\n}\nexports.Refs = Refs;\n//# sourceMappingURL=refs.js.map"]},"metadata":{},"sourceType":"script"}