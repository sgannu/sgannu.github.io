{"ast":null,"code":"\"use strict\";\n\nvar _classCallCheck = require(\"/Users/sgannu/projects/sgannu.github.io/node_modules/@babel/runtime/helpers/classCallCheck\");\n\nvar _createClass = require(\"/Users/sgannu/projects/sgannu.github.io/node_modules/@babel/runtime/helpers/createClass\");\n\nvar _possibleConstructorReturn = require(\"/Users/sgannu/projects/sgannu.github.io/node_modules/@babel/runtime/helpers/possibleConstructorReturn\");\n\nvar _getPrototypeOf = require(\"/Users/sgannu/projects/sgannu.github.io/node_modules/@babel/runtime/helpers/getPrototypeOf\");\n\nvar _inherits = require(\"/Users/sgannu/projects/sgannu.github.io/node_modules/@babel/runtime/helpers/inherits\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nvar regular_1 = require(\"./regular\");\n\nvar CompactGraphRows =\n/*#__PURE__*/\nfunction (_regular_1$RegularGra) {\n  _inherits(CompactGraphRows, _regular_1$RegularGra);\n\n  function CompactGraphRows() {\n    _classCallCheck(this, CompactGraphRows);\n\n    return _possibleConstructorReturn(this, _getPrototypeOf(CompactGraphRows).apply(this, arguments));\n  }\n\n  _createClass(CompactGraphRows, [{\n    key: \"computeRowsFromCommits\",\n    value: function computeRowsFromCommits(commits) {\n      var _this = this;\n\n      commits.forEach(function (commit, i) {\n        var newRow = i;\n        var isFirstCommit = i === 0;\n\n        if (!isFirstCommit) {\n          var parentRow = _this.getRowOf(commit.parents[0]);\n\n          var historyParent = commits[i - 1];\n          newRow = Math.max(parentRow + 1, _this.getRowOf(historyParent.hash));\n          var isMergeCommit = commit.parents.length > 1;\n\n          if (isMergeCommit) {\n            // Push commit to next row to avoid collision when the branch in which\n            // the merge happens has more commits than the merged branch.\n            var mergeTargetParentRow = _this.getRowOf(commit.parents[1]);\n\n            if (parentRow < mergeTargetParentRow) newRow++;\n          }\n        }\n\n        _this.rows.set(commit.hash, newRow);\n      });\n    }\n  }]);\n\n  return CompactGraphRows;\n}(regular_1.RegularGraphRows);\n\nexports.CompactGraphRows = CompactGraphRows;","map":{"version":3,"sources":["../../src/graph-rows/compact.ts"],"names":[],"mappings":";;;;;;;;;;;;;;;;AAEA,IAAA,SAAA,GAAA,OAAA,CAAA,WAAA,CAAA;;IAEa,gB;;;;;;;;;;;;;2CACsB,O,EAA6B;AAAA;;AAC5D,MAAA,OAAO,CAAC,OAAR,CAAgB,UAAC,MAAD,EAAS,CAAT,EAAc;AAC5B,YAAI,MAAM,GAAG,CAAb;AAEA,YAAM,aAAa,GAAG,CAAC,KAAK,CAA5B;;AACA,YAAI,CAAC,aAAL,EAAoB;AAClB,cAAM,SAAS,GAAG,KAAI,CAAC,QAAL,CAAc,MAAM,CAAC,OAAP,CAAe,CAAf,CAAd,CAAlB;;AACA,cAAM,aAAa,GAAG,OAAO,CAAC,CAAC,GAAG,CAAL,CAA7B;AACA,UAAA,MAAM,GAAG,IAAI,CAAC,GAAL,CAAS,SAAS,GAAG,CAArB,EAAwB,KAAI,CAAC,QAAL,CAAc,aAAa,CAAC,IAA5B,CAAxB,CAAT;AAEA,cAAM,aAAa,GAAG,MAAM,CAAC,OAAP,CAAe,MAAf,GAAwB,CAA9C;;AACA,cAAI,aAAJ,EAAmB;AACjB;AACA;AACA,gBAAM,oBAAoB,GAAG,KAAI,CAAC,QAAL,CAAc,MAAM,CAAC,OAAP,CAAe,CAAf,CAAd,CAA7B;;AACA,gBAAI,SAAS,GAAG,oBAAhB,EAAsC,MAAM;AAC7C;AACF;;AAED,QAAA,KAAI,CAAC,IAAL,CAAU,GAAV,CAAc,MAAM,CAAC,IAArB,EAA2B,MAA3B;AACD,OAnBD;AAoBD;;;;EAtB0C,SAAA,CAAA,gB;;AAA7C,OAAA,CAAA,gBAAA,GAAA,gBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nconst regular_1 = require(\"./regular\");\nclass CompactGraphRows extends regular_1.RegularGraphRows {\n    computeRowsFromCommits(commits) {\n        commits.forEach((commit, i) => {\n            let newRow = i;\n            const isFirstCommit = i === 0;\n            if (!isFirstCommit) {\n                const parentRow = this.getRowOf(commit.parents[0]);\n                const historyParent = commits[i - 1];\n                newRow = Math.max(parentRow + 1, this.getRowOf(historyParent.hash));\n                const isMergeCommit = commit.parents.length > 1;\n                if (isMergeCommit) {\n                    // Push commit to next row to avoid collision when the branch in which\n                    // the merge happens has more commits than the merged branch.\n                    const mergeTargetParentRow = this.getRowOf(commit.parents[1]);\n                    if (parentRow < mergeTargetParentRow)\n                        newRow++;\n                }\n            }\n            this.rows.set(commit.hash, newRow);\n        });\n    }\n}\nexports.CompactGraphRows = CompactGraphRows;\n//# sourceMappingURL=compact.js.map"]},"metadata":{},"sourceType":"script"}