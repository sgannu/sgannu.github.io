{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\n\nclass RegularGraphRows {\n  constructor(commits) {\n    this.rows = new Map();\n    this.maxRowCache = undefined;\n    this.computeRowsFromCommits(commits);\n  }\n\n  getRowOf(commitHash) {\n    return this.rows.get(commitHash) || 0;\n  }\n\n  getMaxRow() {\n    if (this.maxRowCache === undefined) {\n      this.maxRowCache = uniq(Array.from(this.rows.values())).length - 1;\n    }\n\n    return this.maxRowCache;\n  }\n\n  computeRowsFromCommits(commits) {\n    commits.forEach((commit, i) => {\n      this.rows.set(commit.hash, i);\n    });\n    this.maxRowCache = undefined;\n  }\n\n}\n\nexports.RegularGraphRows = RegularGraphRows;\n/**\n * Creates a duplicate-free version of an array.\n *\n * Don't use lodash's `uniq` as it increased bundlesize a lot for such a\n * simple function.\n * => The way we bundle for browser seems not to work with `lodash-es`.\n * => I didn't to get tree-shaking to work with `lodash` (the CommonJS version).\n *\n * @param array Array of values\n */\n\nfunction uniq(array) {\n  const set = new Set();\n  array.forEach(value => set.add(value));\n  return Array.from(set);\n}","map":{"version":3,"sources":["../../src/graph-rows/regular.ts"],"names":[],"mappings":";;;;;;AAEA,MAAa,gBAAb,CAA6B;AAK3B,EAAA,WAAA,CAAmB,OAAnB,EAAgD;AAJtC,SAAA,IAAA,GAAO,IAAI,GAAJ,EAAP;AAEF,SAAA,WAAA,GAAkC,SAAlC;AAGN,SAAK,sBAAL,CAA4B,OAA5B;AACD;;AAEM,EAAA,QAAQ,CAAC,UAAD,EAA2B;AACxC,WAAO,KAAK,IAAL,CAAU,GAAV,CAAc,UAAd,KAA6B,CAApC;AACD;;AAEM,EAAA,SAAS,GAAA;AACd,QAAI,KAAK,WAAL,KAAqB,SAAzB,EAAoC;AAClC,WAAK,WAAL,GAAmB,IAAI,CAAC,KAAK,CAAC,IAAN,CAAW,KAAK,IAAL,CAAU,MAAV,EAAX,CAAD,CAAJ,CAAqC,MAArC,GAA8C,CAAjE;AACD;;AACD,WAAO,KAAK,WAAZ;AACD;;AAES,EAAA,sBAAsB,CAAC,OAAD,EAA8B;AAC5D,IAAA,OAAO,CAAC,OAAR,CAAgB,CAAC,MAAD,EAAS,CAAT,KAAc;AAC5B,WAAK,IAAL,CAAU,GAAV,CAAc,MAAM,CAAC,IAArB,EAA2B,CAA3B;AACD,KAFD;AAGA,SAAK,WAAL,GAAmB,SAAnB;AACD;;AAzB0B;;AAA7B,OAAA,CAAA,gBAAA,GAAA,gBAAA;AA4BA;;;;;;;;;;;AAUA,SAAS,IAAT,CAAiB,KAAjB,EAA2B;AACzB,QAAM,GAAG,GAAG,IAAI,GAAJ,EAAZ;AACA,EAAA,KAAK,CAAC,OAAN,CAAe,KAAD,IAAW,GAAG,CAAC,GAAJ,CAAQ,KAAR,CAAzB;AACA,SAAO,KAAK,CAAC,IAAN,CAAW,GAAX,CAAP;AACD","sourceRoot":"","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nclass RegularGraphRows {\n    constructor(commits) {\n        this.rows = new Map();\n        this.maxRowCache = undefined;\n        this.computeRowsFromCommits(commits);\n    }\n    getRowOf(commitHash) {\n        return this.rows.get(commitHash) || 0;\n    }\n    getMaxRow() {\n        if (this.maxRowCache === undefined) {\n            this.maxRowCache = uniq(Array.from(this.rows.values())).length - 1;\n        }\n        return this.maxRowCache;\n    }\n    computeRowsFromCommits(commits) {\n        commits.forEach((commit, i) => {\n            this.rows.set(commit.hash, i);\n        });\n        this.maxRowCache = undefined;\n    }\n}\nexports.RegularGraphRows = RegularGraphRows;\n/**\n * Creates a duplicate-free version of an array.\n *\n * Don't use lodash's `uniq` as it increased bundlesize a lot for such a\n * simple function.\n * => The way we bundle for browser seems not to work with `lodash-es`.\n * => I didn't to get tree-shaking to work with `lodash` (the CommonJS version).\n *\n * @param array Array of values\n */\nfunction uniq(array) {\n    const set = new Set();\n    array.forEach((value) => set.add(value));\n    return Array.from(set);\n}\n//# sourceMappingURL=regular.js.map"]},"metadata":{},"sourceType":"script"}